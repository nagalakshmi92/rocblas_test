<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hip__runtime__api_8h" kind="file" language="C++">
    <compoundname>hip_runtime_api.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">hip/hcc_detail/host_defines.h</includes>
    <includes local="no">hip/hip_runtime_api.h</includes>
    <includes local="no">hip/hcc_detail/driver_types.h</includes>
    <includes local="no">hip/hcc_detail/hip_texture_types.h</includes>
    <includes local="no">hip/hcc_detail/hip_surface_types.h</includes>
    <includes local="no">hip/hcc_detail/hip_prof_api.h</includes>
    <incdepgraph>
      <node id="4">
        <label>hip/hip_runtime_api.h</label>
      </node>
      <node id="6">
        <label>hip/hcc_detail/hip_texture_types.h</label>
      </node>
      <node id="1">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>hip/hcc_detail/driver_types.h</label>
      </node>
      <node id="7">
        <label>hip/hcc_detail/hip_surface_types.h</label>
      </node>
      <node id="0">
        <label>ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h</label>
        <link refid="hip__runtime__api_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hip/hcc_detail/hip_prof_api.h</label>
      </node>
      <node id="3">
        <label>hip/hcc_detail/host_defines.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structhipIpcMemHandle__t" prot="public">hipIpcMemHandle_t</innerclass>
    <innerclass refid="structhipFuncAttributes" prot="public">hipFuncAttributes</innerclass>
    <innerclass refid="structdim3" prot="public">dim3</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="hip__runtime__api_8h_1a9a93afd2ec3f43ce2612feb962c67ced" prot="public" static="no">
        <name>GENERIC_GRID_LAUNCH</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="35" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1ad034ea058031ed95e52d3bac1743640a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>msg</defname></param>
        <initializer>__attribute__ ((deprecated(msg)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="47" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1a8b1f4ecf7e75085716bc116eb37d5b17" prot="public" static="no">
        <name>DEPRECATED_MSG</name>
        <initializer>&quot;This API is marked as deprecated and may not be supported in future releases.For more details please refer https://github.com/ROCm-Developer-Tools/HIP/tree/master/docs/markdown/hip_deprecated_api_list&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="50" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1ab78d63242f906b6d92cf766bd88a1898" prot="public" static="no">
        <name>HIP_LAUNCH_PARAM_BUFFER_POINTER</name>
        <initializer>((void*)0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="56" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1a529edcc8dc562e3f6f6c6d17bf868f03" prot="public" static="no">
        <name>HIP_LAUNCH_PARAM_BUFFER_SIZE</name>
        <initializer>((void*)0x02)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="57" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1a86cd80c0b352a6679a7fac89e026f0f7" prot="public" static="no">
        <name>HIP_LAUNCH_PARAM_END</name>
        <initializer>((void*)0x03)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="58" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1a0f49b614c87c5d703133fbc52fc68670" prot="public" static="no">
        <name>__dparm</name>
        <param><defname>x</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="64" column="12" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1aa6226e5fe180a7a8da048f53a5baaf45" prot="public" static="no">
        <name>hipIpcMemLazyEnablePeerAccess</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="83" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hip__runtime__api_8h_1af095c042450b241001894e1578d71acd" prot="public" static="no">
        <name>HIP_IPC_HANDLE_SIZE</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="85" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga6df5f70eb976836ab3598cacf0ffcdf9" prot="public" static="no">
        <name>hipStreamDefault</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para>Flags that can be used with hipStreamCreateWithFlags. </para>        </briefdescription>
        <detaileddescription>
<para>Default stream creation flags. These are used with <ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="126" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d" prot="public" static="no">
        <name>hipStreamNonBlocking</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>Stream does not implicitly synchronize with null stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="128" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga122a5853359eba97cf047ddd153740f0" prot="public" static="no">
        <name>hipEventDefault</name>
        <initializer>0x0</initializer>
        <briefdescription>
<para>Flags that can be used with hipEventCreateWithFlags: </para>        </briefdescription>
        <detaileddescription>
<para>Default flags </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="132" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gafa1c076a5b991763a98695063f1ea11d" prot="public" static="no">
        <name>hipEventBlockingSync</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Waiting will yield CPU. Power-friendly and usage-friendly but may increase latency. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="133" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga3c0f44a85e36a4c67671da6bcdad0351" prot="public" static="no">
        <name>hipEventDisableTiming</name>
        <initializer>0x2</initializer>
        <briefdescription>
<para>Disable event&apos;s capability to record timing information. May improve performance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="135" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga0f01d74059baa704e42aeff8222166bb" prot="public" static="no">
        <name>hipEventInterprocess</name>
        <initializer>0x4</initializer>
        <briefdescription>
<para>Event can support IPC. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>- not supported in HIP. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="137" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gae0909af811a68136a82c970d4e607133" prot="public" static="no">
        <name>hipEventReleaseToDevice</name>
        <initializer>0x40000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="138" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gab89a2c35618cc9e3e9e2308216c9fc45" prot="public" static="no">
        <name>hipEventReleaseToSystem</name>
        <initializer>0x80000000</initializer>
        <briefdescription>
<para>&lt; Use a device-scope release when recording this event. </para>        </briefdescription>
        <detaileddescription>
<para>This flag is useful to obtain more precise timings of commands between events. The flag is a no-op on CUDA platforms. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="142" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gad594ec51cb5b5e946c1e354bf80bddc7" prot="public" static="no">
        <name>hipHostMallocDefault</name>
        <initializer>0x0</initializer>
        <briefdescription>
<para>&lt; Use a system-scope release that when recording this event. </para>        </briefdescription>
        <detaileddescription>
<para>This flag is useful to make non-coherent host memory visible to the host. The flag is a no-op on CUDA platforms. Flags that can be used with hipHostMalloc </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="149" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga99b7c2b08a834b4736bfdc24893a6bc5" prot="public" static="no">
        <name>hipHostMallocPortable</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Memory is considered allocated by all contexts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="150" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gaf6e07be144bb1031bfcf9816335906cc" prot="public" static="no">
        <name>hipHostMallocMapped</name>
        <initializer>0x2</initializer>
        <briefdescription>
<para>Map the allocation into the address space for the current device. </para>        </briefdescription>
        <detaileddescription>
<para>The device pointer can be obtained with <ref refid="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" kindref="member">hipHostGetDevicePointer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="151" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga21beb95617644dbefaffaacdc0f0a35c" prot="public" static="no">
        <name>hipHostMallocWriteCombined</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="154" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gac726701ac143539b0893c506377f44ee" prot="public" static="no">
        <name>hipHostMallocCoherent</name>
        <initializer>0x40000000</initializer>
        <briefdescription>
<para>Allocate coherent memory. </para>        </briefdescription>
        <detaileddescription>
<para>Overrides HIP_COHERENT_HOST_ALLOC for specific allocation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="155" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gaeec0b563ac9d02f45ed02ceab771a472" prot="public" static="no">
        <name>hipHostMallocNonCoherent</name>
        <initializer>0x80000000</initializer>
        <briefdescription>
<para>Allocate non-coherent memory. </para>        </briefdescription>
        <detaileddescription>
<para>Overrides HIP_COHERENT_HOST_ALLOC for specific allocation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="158" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gac7c100d241ff84ad10109bb00b7b25dc" prot="public" static="no">
        <name>hipHostRegisterDefault</name>
        <initializer>0x0</initializer>
        <briefdescription>
<para>Flags that can be used with hipHostRegister. </para>        </briefdescription>
        <detaileddescription>
<para>Memory is Mapped and Portable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="164" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga2db444f2315d412d3c7ba80ec6049583" prot="public" static="no">
        <name>hipHostRegisterPortable</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Memory is considered registered by all contexts. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="165" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gacfa4edcfcb39fc61bff6bdecb14d7618" prot="public" static="no">
        <name>hipHostRegisterMapped</name>
        <initializer>0x2</initializer>
        <briefdescription>
<para>Map the allocation into the address space for the current device. </para>        </briefdescription>
        <detaileddescription>
<para>The device pointer can be obtained with <ref refid="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" kindref="member">hipHostGetDevicePointer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="166" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gaefa79f1b4481d6a1d1091c14b24f33d0" prot="public" static="no">
        <name>hipHostRegisterIoMemory</name>
        <initializer>0x4</initializer>
        <briefdescription>
<para>Not supported. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="169" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga9032d35eb7383948828ee48e1e19f5fd" prot="public" static="no">
        <name>hipDeviceScheduleAuto</name>
        <initializer>0x0</initializer>
        <briefdescription>
<para>Automatically select between Spin and Yield. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="172" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga713d962bafb7758dc1ff0675e4239453" prot="public" static="no">
        <name>hipDeviceScheduleSpin</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Dedicate a CPU core to spin-wait. </para>        </briefdescription>
        <detaileddescription>
<para>Provides lowest latency, but burns a CPU core and may consume more power. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="173" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gaaf1e2706430c06601aa12a8af2a0ba5a" prot="public" static="no">
        <name>hipDeviceScheduleYield</name>
        <initializer>0x2</initializer>
        <briefdescription>
<para>Yield the CPU to the operating system when waiting. </para>        </briefdescription>
        <detaileddescription>
<para>May increase latency, but lowers power and is friendlier to other threads in the system. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="176" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gac9480926da806dfe7241e3c8fa0bd060" prot="public" static="no">
        <name>hipDeviceScheduleBlockingSync</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="179" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gad0ee225558955549785dc0bf37e53554" prot="public" static="no">
        <name>hipDeviceScheduleMask</name>
        <initializer>0x7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="180" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga0b7ffad8d7cfcbf9d3c863d30ef651ae" prot="public" static="no">
        <name>hipDeviceMapHost</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="182" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gad1c4f8c9fab30ce95f59e2cc404f4d96" prot="public" static="no">
        <name>hipDeviceLmemResizeToMax</name>
        <initializer>0x16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="183" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga2cae862086a89539b3cf6906a458190c" prot="public" static="no">
        <name>hipArrayDefault</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para>Default HIP array allocation flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="185" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga7b5573cd703c789c35edb588fb973588" prot="public" static="no">
        <name>hipArrayLayered</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="186" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1gadb552c0ab451ab238fccd142e975a840" prot="public" static="no">
        <name>hipArraySurfaceLoadStore</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="187" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga59685fdad42a844747214758c05f333c" prot="public" static="no">
        <name>hipArrayCubemap</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="188" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__GlobalDefs_1ga62bc9f85553dbe4eea819ae35f8baaac" prot="public" static="no">
        <name>hipArrayTextureGather</name>
        <initializer>0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="189" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PeerToPeer_1ga898bad8d5d67a63d7264d9038e02306a" prot="public" static="no">
        <name>USE_PEER_NON_UNIFIED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1851" column="9" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="1851" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="hip__runtime__api_8h_1a02ceb1513c852c4dd1ecf3cc459fda70" prot="public" static="no">
        <name>hipLimit_t</name>
        <enumvalue id="hip__runtime__api_8h_1a02ceb1513c852c4dd1ecf3cc459fda70a1ec17519ca7e1fa12dde48d3a919d210" prot="public">
          <name>hipLimitMallocHeapSize</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="117" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="enum" id="group__GlobalDefs_1ga54cbbb7697c63cf9b13383b49819d500" prot="public" static="no">
        <name>hipJitOption</name>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500adb9370990a4403b1e5e03724031b4ecb" prot="public">
          <name>hipJitOptionMaxRegisters</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a5c9a55072a6f4ed3ca61604ef66a4a86" prot="public">
          <name>hipJitOptionThreadsPerBlock</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a8ee4752e49439cb2fbecdf1dcc69871e" prot="public">
          <name>hipJitOptionWallTime</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a144aa71e24aa20fb4162e9978d6c66d1" prot="public">
          <name>hipJitOptionInfoLogBuffer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a9692ed236671843b99de1dbfc7aadb8f" prot="public">
          <name>hipJitOptionInfoLogBufferSizeBytes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a160e81f3788646e12f4526027c4c8e77" prot="public">
          <name>hipJitOptionErrorLogBuffer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a85c04bedf8aaf7a55628301a9672dd71" prot="public">
          <name>hipJitOptionErrorLogBufferSizeBytes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a853499616f10eaa99df134371f0ed075" prot="public">
          <name>hipJitOptionOptimizationLevel</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500ab8e971a00aa557a668791e3403aafeca" prot="public">
          <name>hipJitOptionTargetFromContext</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a4c83761657de80ef98f0a34d1d22f323" prot="public">
          <name>hipJitOptionTarget</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500af0117529faba4b00c265add35d44c71c" prot="public">
          <name>hipJitOptionFallbackStrategy</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500accc9993c7598bdcbfe2c7738fc2dc2a6" prot="public">
          <name>hipJitOptionGenerateDebugInfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500ad42abb970a18154f23e359e097d5aa89" prot="public">
          <name>hipJitOptionLogVerbose</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a75f073079cf61c48325633878532ab01" prot="public">
          <name>hipJitOptionGenerateLineInfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a03909311a4e24160a3b04796cddb5772" prot="public">
          <name>hipJitOptionCacheMode</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500ae942560c8927000dc8933aff96f4ed9e" prot="public">
          <name>hipJitOptionSm3xOpt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a10b1271048a9a8adc55aebcfad56b5b2" prot="public">
          <name>hipJitOptionFastCompile</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga54cbbb7697c63cf9b13383b49819d500a639edb73879171ee5c22ce54d7d5b1d5" prot="public">
          <name>hipJitOptionNumOptions</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="196" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="196" bodyend="215"/>
      </memberdef>
      <memberdef kind="enum" id="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" prot="public" static="no">
        <name>hipFuncCache_t</name>
        <enumvalue id="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa0813fbaa008ce1231ff9fed3911eb3af" prot="public">
          <name>hipFuncCachePreferNone</name>
          <briefdescription>
<para>no preference for shared memory or L1 (default) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa9b34337dfbadba25ed2aa270bbcabc43" prot="public">
          <name>hipFuncCachePreferShared</name>
          <briefdescription>
<para>prefer larger shared memory and smaller L1 cache </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa636a3c140db6b9d4a8bf7d5a61c398c5" prot="public">
          <name>hipFuncCachePreferL1</name>
          <briefdescription>
<para>prefer larger L1 cache and smaller shared memory </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa0ddab0e840107634a152033103be44d7" prot="public">
          <name>hipFuncCachePreferEqual</name>
          <briefdescription>
<para>prefer equal size L1 cache and shared memory </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>On AMD devices and some Nvidia devices, these hints and controls are ignored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="221" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="221" bodyend="226"/>
      </memberdef>
      <memberdef kind="enum" id="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" prot="public" static="no">
        <name>hipSharedMemConfig</name>
        <enumvalue id="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104eaf5b325c9b7bde878913f768eaba5014d" prot="public">
          <name>hipSharedMemBankSizeDefault</name>
          <briefdescription>
<para>The compiler selects a device-specific value for the banking. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104ea0a95a6e0c33106c42d66ab9476ff954a" prot="public">
          <name>hipSharedMemBankSizeFourByte</name>
          <briefdescription>
<para>Shared mem is banked at 4-bytes intervals and performs best when adjacent threads access data 4 bytes apart. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104ea64518b4f5a25f536c883330167e79258" prot="public">
          <name>hipSharedMemBankSizeEightByte</name>
          <briefdescription>
<para>Shared mem is banked at 8-byte intervals and performs best when adjacent threads access data 4 bytes apart. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>On AMD devices and some Nvidia devices, these hints and controls are ignored. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="232" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="232" bodyend="238"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hip__runtime__api_8h_1a0ebbb61a275c1adb950de995aadd22bf" prot="public" static="no">
        <type>struct ihipCtx_t *</type>
        <definition>typedef struct ihipCtx_t* hipCtx_t</definition>
        <argsstring></argsstring>
        <name>hipCtx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="74" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hip__runtime__api_8h_1a181a06ca0d50ffdd6e019c87ffe02fb4" prot="public" static="no">
        <type>int</type>
        <definition>typedef int hipDevice_t</definition>
        <argsstring></argsstring>
        <name>hipDevice_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="77" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hip__runtime__api_8h_1a0fc4326b345ac109cb72b90a22a1cb29" prot="public" static="no">
        <type>struct ihipStream_t *</type>
        <definition>typedef struct ihipStream_t* hipStream_t</definition>
        <argsstring></argsstring>
        <name>hipStream_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="79" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hip__runtime__api_8h_1abd2e1ad718d6d7e625a54c24cb920793" prot="public" static="no">
        <type>struct ihipIpcEventHandle_t *</type>
        <definition>typedef struct ihipIpcEventHandle_t* hipIpcEventHandle_t</definition>
        <argsstring></argsstring>
        <name>hipIpcEventHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="93" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hip__runtime__api_8h_1ab0b1dd6ce7ee1720c2970552c20173e8" prot="public" static="no">
        <type>struct ihipModule_t *</type>
        <definition>typedef struct ihipModule_t* hipModule_t</definition>
        <argsstring></argsstring>
        <name>hipModule_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="98" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hip__runtime__api_8h_1ac7ab0ad556b5e1b3461e450fd2c7da3b" prot="public" static="no">
        <type>struct ihipModuleSymbol_t *</type>
        <definition>typedef struct ihipModuleSymbol_t* hipFunction_t</definition>
        <argsstring></argsstring>
        <name>hipFunction_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="100" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hip__runtime__api_8h_1a3640952e23c028a87a7db564443948ea" prot="public" static="no">
        <type>struct ihipEvent_t *</type>
        <definition>typedef struct ihipEvent_t* hipEvent_t</definition>
        <argsstring></argsstring>
        <name>hipEvent_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="115" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__Stream_1ga6d4e90ec5736f9728102be22d0559dfd" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* hipStreamCallback_t) (hipStream_t stream, hipError_t status, void *userData)</definition>
        <argsstring>)(hipStream_t stream, hipError_t status, void *userData)</argsstring>
        <name>hipStreamCallback_t</name>
        <briefdescription>
<para>Stream CallBack struct. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="796" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="796" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__Device_1gaefdc2847fb1d6c3fb1354e827a191ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceSynchronize</definition>
        <argsstring>(void)</argsstring>
        <name>hipDeviceSynchronize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits on all active streams on current device. </para>        </briefdescription>
        <detaileddescription>
<para>When this command is invoked, the host thread gets blocked until all the commands associated with streams associated with the device. HIP does not support multiple blocking modes (yet!).</para><para><simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1ga43c1e7f15925eeb762195ccb5e063eae" kindref="member">hipSetDevice</ref>, <ref refid="group__Device_1ga8d57161ae56a8edc46eeda447417bf6c" kindref="member">hipDeviceReset</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga8d57161ae56a8edc46eeda447417bf6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceReset</definition>
        <argsstring>(void)</argsstring>
        <name>hipDeviceReset</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>The state of current device is discarded and updated to a fresh state. </para>        </briefdescription>
        <detaileddescription>
<para>Calling this function deletes all streams created, memory allocated, kernels running, events created. Make sure that no other thread is using the device or streams, memory, kernels, events associated with the current device.</para><para><simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1gaefdc2847fb1d6c3fb1354e827a191ebd" kindref="member">hipDeviceSynchronize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga43c1e7f15925eeb762195ccb5e063eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipSetDevice</definition>
        <argsstring>(int deviceId)</argsstring>
        <name>hipSetDevice</name>
        <param>
          <type>int</type>
          <declname>deviceId</declname>
        </param>
        <briefdescription>
<para>Set default device to be used for subsequent hip API calls from this thread. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">deviceId</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid device in range 0...<ref refid="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" kindref="member">hipGetDeviceCount()</ref>.</para></parameterdescription>
</parameteritem>
</parameterlist>
Sets <computeroutput>device</computeroutput> as the default device for the calling host thread. Valid device id&apos;s are 0... (<ref refid="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" kindref="member">hipGetDeviceCount()</ref>-1).</para><para>Many HIP APIs implicitly use the &quot;default device&quot; :</para><para><itemizedlist>
<listitem><para>Any device memory subsequently allocated from this host thread (using hipMalloc) will be allocated on device.</para></listitem><listitem><para>Any streams or events created from this host thread will be associated with device.</para></listitem><listitem><para>Any kernels launched from this host thread (using hipLaunchKernel) will be executed on device (unless a specific stream is specified, in which case the device associated with that stream will be used).</para></listitem></itemizedlist>
</para><para>This function may be called from any host thread. Multiple host threads may use the same device. This function does no synchronization with the previous or new device, and has very little runtime overhead. Applications can use hipSetDevice to quickly switch the default device before making a HIP runtime call which uses the default device.</para><para>The default device is stored in thread-local-storage for each thread. Thread-pool implementations may inherit the default device of the previous thread. A good practice is to always call hipSetDevice at the start of HIP coding sequency to establish a known standard device.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice, #hipErrorDeviceAlreadyInUse</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1ga7e0e2e8c5f78e3c7449764657c254e0a" kindref="member">hipGetDevice</ref>, <ref refid="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" kindref="member">hipGetDeviceCount</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga7e0e2e8c5f78e3c7449764657c254e0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipGetDevice</definition>
        <argsstring>(int *deviceId)</argsstring>
        <name>hipGetDevice</name>
        <param>
          <type>int *</type>
          <declname>deviceId</declname>
        </param>
        <briefdescription>
<para>Return the default device id for the calling host thread. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">device</parametername>
</parameternamelist>
<parameterdescription>
<para>*device is written with the default device</para></parameterdescription>
</parameteritem>
</parameterlist>
HIP maintains an default device for each thread using thread-local-storage. This device is used implicitly for HIP runtime APIs called by this thread. hipGetDevice returns in * <computeroutput>device</computeroutput> the default device for the calling host thread.</para><para><simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1ga43c1e7f15925eeb762195ccb5e063eae" kindref="member">hipSetDevice</ref>, hipGetDevicesizeBytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipGetDeviceCount</definition>
        <argsstring>(int *count)</argsstring>
        <name>hipGetDeviceCount</name>
        <param>
          <type>int *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Return number of compute-capable devices. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>[output]</parametername>
</parameternamelist>
<parameterdescription>
<para>count Returns number of compute-capable devices.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorNoDevice</para></simplesect>
Returns in <computeroutput>*count</computeroutput> the number of devices that have ability to run compute commands. If there are no such devices, then <ref refid="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" kindref="member">hipGetDeviceCount</ref> will return #hipErrorNoDevice. If 1 or more devices can be found, then hipGetDeviceCount returns #hipSuccess. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga7080a145a4239a7276e0dc22062026c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetAttribute</definition>
        <argsstring>(int *pi, hipDeviceAttribute_t attr, int deviceId)</argsstring>
        <name>hipDeviceGetAttribute</name>
        <param>
          <type>int *</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>hipDeviceAttribute_t</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceId</declname>
        </param>
        <briefdescription>
<para>Query for a specific device attribute. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pi</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to value to return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">attr</parametername>
</parameternamelist>
<parameterdescription>
<para>attribute to query </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deviceId</parametername>
</parameternamelist>
<parameterdescription>
<para>which device to query for information</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice, #hipErrorInvalidValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga32208513b7cd491f0cb5fc884053f790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipGetDeviceProperties</definition>
        <argsstring>(hipDeviceProp_t *prop, int deviceId)</argsstring>
        <name>hipGetDeviceProperties</name>
        <param>
          <type>hipDeviceProp_t *</type>
          <declname>prop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceId</declname>
        </param>
        <briefdescription>
<para>Returns device properties. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">prop</parametername>
</parameternamelist>
<parameterdescription>
<para>written with device properties </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">deviceId</parametername>
</parameternamelist>
<parameterdescription>
<para>which device to query for information</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice </para></simplesect>
<xrefsect id="bug_1_bug000001"><xreftitle>Bug</xreftitle><xrefdescription><para>HCC always returns 0 for maxThreadsPerMultiProcessor </para><para>HCC always returns 0 for regsPerBlock </para><para>HCC always returns 0 for l2CacheSize</para></xrefdescription></xrefsect></para><para>Populates hipGetDeviceProperties with information for the specified device. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1gaada3d30a46ae06f68cf1574f496b86ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceSetCacheConfig</definition>
        <argsstring>(hipFuncCache_t cacheConfig)</argsstring>
        <name>hipDeviceSetCacheConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref></type>
          <declname>cacheConfig</declname>
        </param>
        <briefdescription>
<para>Set L1/Shared cache partition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cacheConfig</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInitializationError Note: AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga37057f9830ad6fab7ce5f05f6d3c89ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetCacheConfig</definition>
        <argsstring>(hipFuncCache_t *cacheConfig)</argsstring>
        <name>hipDeviceGetCacheConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref> *</type>
          <declname>cacheConfig</declname>
        </param>
        <briefdescription>
<para>Set Cache configuration for a specific function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cacheConfig</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInitializationError Note: AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga8edc85bb9637d6b1eda0d064d141a255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetLimit</definition>
        <argsstring>(size_t *pValue, enum hipLimit_t limit)</argsstring>
        <name>hipDeviceGetLimit</name>
        <param>
          <type>size_t *</type>
          <declname>pValue</declname>
        </param>
        <param>
          <type>enum hipLimit_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Get Resource limits of current device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pValue</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">limit</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorUnsupportedLimit, #hipErrorInvalidValue Note: Currently, only hipLimitMallocHeapSize is available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1gafdb33ef569eb89808fc5178d04b508ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipFuncSetCacheConfig</definition>
        <argsstring>(const void *func, hipFuncCache_t config)</argsstring>
        <name>hipFuncSetCacheConfig</name>
        <param>
          <type>const void *</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Set Cache configuration for a specific function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config;</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInitializationError Note: AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga1bb08f774a34a468d969a8a04791c9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetSharedMemConfig</definition>
        <argsstring>(hipSharedMemConfig *pConfig)</argsstring>
        <name>hipDeviceGetSharedMemConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" kindref="member">hipSharedMemConfig</ref> *</type>
          <declname>pConfig</declname>
        </param>
        <briefdescription>
<para>Returns bank width of shared memory for current device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pConfig</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInitializationError</para></simplesect>
Note: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="470" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga9b1f279084e76691cedfbfadf9c717ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceSetSharedMemConfig</definition>
        <argsstring>(hipSharedMemConfig config)</argsstring>
        <name>hipDeviceSetSharedMemConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" kindref="member">hipSharedMemConfig</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>The bank width of shared memory on current device is set. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInitializationError</para></simplesect>
Note: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="484" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1ga6e54db382768827e84725632018307aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipSetDeviceFlags</definition>
        <argsstring>(unsigned flags)</argsstring>
        <name>hipSetDeviceFlags</name>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>The current device behavior is changed according the flags passed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>The schedule flags impact how HIP waits for the completion of a command running on a device. hipDeviceScheduleSpin : HIP runtime will actively spin in the thread which submitted the work until the command completes. This offers the lowest latency, but will consume a CPU core and may increase power. hipDeviceScheduleYield : The HIP runtime will yield the CPU to system so that other tasks can use it. This may increase latency to detect the completion but will consume less power and is friendlier to other tasks in the system. hipDeviceScheduleBlockingSync : On ROCm platform, this is a synonym for hipDeviceScheduleYield. hipDeviceScheduleAuto : Use a hueristic to select between Spin and Yield modes. If the number of HIP contexts is greater than the number of logical processors in the system, use Spin scheduling. Else use Yield scheduling.</para></parameterdescription>
</parameteritem>
</parameterlist>
hipDeviceMapHost : Allow mapping host memory. On ROCM, this is always allowed and the flag is ignored. hipDeviceLmemResizeToMax : <simplesect kind="warning"><para>ROCm silently ignores this flag.</para></simplesect>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice, #hipErrorSetOnActiveProcess </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="510" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Device_1gaf1e365e1d17cf40644d1470de4817c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipChooseDevice</definition>
        <argsstring>(int *device, const hipDeviceProp_t *prop)</argsstring>
        <name>hipChooseDevice</name>
        <param>
          <type>int *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const hipDeviceProp_t *</type>
          <declname>prop</declname>
        </param>
        <briefdescription>
<para>Device which matches hipDeviceProp_t is returned. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">device</parametername>
</parameternamelist>
<parameterdescription>
<para>ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para>properties pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="520" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Error_1ga533daeb9114d7fc2db8d867adf9e419b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipGetLastError</definition>
        <argsstring>(void)</argsstring>
        <name>hipGetLastError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return last error returned by any HIP runtime API call and resets the stored error code to #hipSuccess. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>return code from last HIP called from the active host thread</para></simplesect>
Returns the last error that has been returned by any of the runtime calls in the same host thread, and then resets the saved error to #hipSuccess.</para><para><simplesect kind="see"><para><ref refid="group__Error_1ga1421a2ee561f30d5b1dbed3ecb28b264" kindref="member">hipGetErrorString</ref>, <ref refid="group__Error_1ga533daeb9114d7fc2db8d867adf9e419b" kindref="member">hipGetLastError</ref>, hipPeakAtLastError, hipError_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="545" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Error_1ga1dd660bc739f7e13edd34615660f0148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipPeekAtLastError</definition>
        <argsstring>(void)</argsstring>
        <name>hipPeekAtLastError</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Return last error returned by any HIP runtime API call. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>#hipSuccess</para></simplesect>
Returns the last error that has been returned by any of the runtime calls in the same host thread. Unlike hipGetLastError, this function does not reset the saved error code.</para><para><simplesect kind="see"><para><ref refid="group__Error_1ga1421a2ee561f30d5b1dbed3ecb28b264" kindref="member">hipGetErrorString</ref>, <ref refid="group__Error_1ga533daeb9114d7fc2db8d867adf9e419b" kindref="member">hipGetLastError</ref>, hipPeakAtLastError, hipError_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Error_1ga88c474d77635523dbf6ca67be7b56999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hipGetErrorName</definition>
        <argsstring>(hipError_t hip_error)</argsstring>
        <name>hipGetErrorName</name>
        <param>
          <type>hipError_t</type>
          <declname>hip_error</declname>
        </param>
        <briefdescription>
<para>Return name of the specified error code in text form. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hip_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code to convert to name. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char pointer to the NULL-terminated error name</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Error_1ga1421a2ee561f30d5b1dbed3ecb28b264" kindref="member">hipGetErrorString</ref>, <ref refid="group__Error_1ga533daeb9114d7fc2db8d867adf9e419b" kindref="member">hipGetLastError</ref>, hipPeakAtLastError, hipError_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Error_1ga1421a2ee561f30d5b1dbed3ecb28b264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hipGetErrorString</definition>
        <argsstring>(hipError_t hipError)</argsstring>
        <name>hipGetErrorString</name>
        <param>
          <type>hipError_t</type>
          <declname>hipError</declname>
        </param>
        <briefdescription>
<para>Return handy text string message to explain the error which occurred. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hipError</parametername>
</parameternamelist>
<parameterdescription>
<para>Error code to convert to string. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char pointer to the NULL-terminated error string</para></simplesect>
<simplesect kind="warning"><para>: on HCC, this function returns the name of the error (same as hipGetErrorName)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Error_1ga88c474d77635523dbf6ca67be7b56999" kindref="member">hipGetErrorName</ref>, <ref refid="group__Error_1ga533daeb9114d7fc2db8d867adf9e419b" kindref="member">hipGetLastError</ref>, hipPeakAtLastError, hipError_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamCreate</definition>
        <argsstring>(hipStream_t *stream)</argsstring>
        <name>hipStreamCreate</name>
        <param>
          <type>hipStream_t *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Create an asynchronous stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to hipStream_t. This function writes the memory with the newly created stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue</para></simplesect>
Create a new asynchronous stream. <computeroutput>stream</computeroutput> returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamCreateWithFlags</definition>
        <argsstring>(hipStream_t *stream, unsigned int flags)</argsstring>
        <name>hipStreamCreateWithFlags</name>
        <param>
          <type>hipStream_t *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Create an asynchronous stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to new stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>to control stream creation. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue</para></simplesect>
Create a new asynchronous stream. <computeroutput>stream</computeroutput> returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy. Flags controls behavior of the stream. See <ref refid="group__GlobalDefs_1ga6df5f70eb976836ab3598cacf0ffcdf9" kindref="member">hipStreamDefault</ref>, <ref refid="group__GlobalDefs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d" kindref="member">hipStreamNonBlocking</ref>.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="637" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamCreateWithPriority</definition>
        <argsstring>(hipStream_t *stream, unsigned int flags, int priority)</argsstring>
        <name>hipStreamCreateWithPriority</name>
        <param>
          <type>hipStream_t *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Create an asynchronous stream with the specified priority. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to new stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>to control stream creation. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>of the stream. Lower numbers represent higher priorities. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue</para></simplesect>
Create a new asynchronous stream with the specified priority. <computeroutput>stream</computeroutput> returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy. Flags controls behavior of the stream. See <ref refid="group__GlobalDefs_1ga6df5f70eb976836ab3598cacf0ffcdf9" kindref="member">hipStreamDefault</ref>, <ref refid="group__GlobalDefs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d" kindref="member">hipStreamNonBlocking</ref>.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1ga2b0709fb23b273abec8ea223ebb362bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetStreamPriorityRange</definition>
        <argsstring>(int *leastPriority, int *greatestPriority)</argsstring>
        <name>hipDeviceGetStreamPriorityRange</name>
        <param>
          <type>int *</type>
          <declname>leastPriority</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>greatestPriority</declname>
        </param>
        <briefdescription>
<para>Returns numerical values that correspond to the least and greatest stream priority. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">leastPriority</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer in which value corresponding to least priority is returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">greatestPriority</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer in which value corresponding to greatest priority is returned.</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns in *leastPriority and *greatestPriority the numerical values that correspond to the least and greatest stream priority respectively. Stream priorities follow a convention where lower numbers imply greater priorities. The range of meaningful stream priorities is given by [*greatestPriority, *leastPriority]. If the user attempts to create a stream with a priority value that is outside the the meaningful range as specified by this API, the priority is automatically clamped to within the valid range. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamDestroy</definition>
        <argsstring>(hipStream_t stream)</argsstring>
        <name>hipStreamDestroy</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Destroys the specified stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Valid pointer to hipStream_t. This function writes the memory with the newly created stream. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess #hipErrorInvalidResourceHandle</para></simplesect>
Destroys the specified stream.</para><para>If commands are still executing on the specified stream, some may complete execution before the queue is deleted.</para><para>The queue may be destroyed while some commands are still inflight, or may wait for all commands queued to the stream before destroying it.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>, <ref refid="group__Stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e" kindref="member">hipStreamQuery</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="696" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamQuery</definition>
        <argsstring>(hipStream_t stream)</argsstring>
        <name>hipStreamQuery</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Return #hipSuccess if all of the operations in the specified <computeroutput>stream</computeroutput> have completed, or #hipErrorNotReady if not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to query</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorNotReady, #hipErrorInvalidResourceHandle</para></simplesect>
This is thread-safe and returns a snapshot of the current state of the queue. However, if other host threads are sending work to the stream, the status may change immediately after the function is called. It is typically used for debug.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamSynchronize</definition>
        <argsstring>(hipStream_t stream)</argsstring>
        <name>hipStreamSynchronize</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Wait for all commands in stream to complete. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream identifier.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidResourceHandle</para></simplesect>
This command is host-synchronous : the host will block until the specified stream is empty.</para><para>This command follows standard null-stream semantics. Specifically, specifying the null stream will cause the command to wait for other streams on the same device to complete all pending operations.</para><para>This command honors the hipDeviceLaunchBlocking flag, which controls whether the wait is active or blocking.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="736" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamWaitEvent</definition>
        <argsstring>(hipStream_t stream, hipEvent_t event, unsigned int flags)</argsstring>
        <name>hipStreamWaitEvent</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>hipEvent_t</type>
          <declname>event</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Make the specified compute stream wait for an event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to make wait. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>event to wait on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>control operation [must be 0]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidResourceHandle</para></simplesect>
This function inserts a wait operation into the specified stream. All future work submitted to <computeroutput>stream</computeroutput> will wait until <computeroutput>event</computeroutput> reports completion before beginning execution.</para><para>This function only waits for commands in the current stream to complete. Notably,, this function does not impliciy wait for commands in the default stream to complete, even if the specified stream is created with hipStreamNonBlocking = 0.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1ga3249555a26439591b8873f70b39bb116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamGetFlags</definition>
        <argsstring>(hipStream_t stream, unsigned int *flags)</argsstring>
        <name>hipStreamGetFlags</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Return flags associated with this stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to be queried </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned integer in which the stream&apos;s flags are returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidResourceHandle</para></simplesect>
<simplesect kind="return"><para>#hipSuccess #hipErrorInvalidValue #hipErrorInvalidResourceHandle</para></simplesect>
Return flags associated with this stream in *<computeroutput>flags</computeroutput>.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1gae5a0d1e66035b157149ec10f5c7952be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamGetPriority</definition>
        <argsstring>(hipStream_t stream, int *priority)</argsstring>
        <name>hipStreamGetPriority</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>priority</declname>
        </param>
        <briefdescription>
<para>Query the priority of a stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream to be queried </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an unsigned integer in which the stream&apos;s priority is returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidResourceHandle</para></simplesect>
<simplesect kind="return"><para>#hipSuccess #hipErrorInvalidValue #hipErrorInvalidResourceHandle</para></simplesect>
Query the priority of a stream. The priority is returned in in priority.</para><para><simplesect kind="see"><para><ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Stream_1ga3e098cd7478828b2104abb41a7bb00d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipStreamAddCallback</definition>
        <argsstring>(hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)</argsstring>
        <name>hipStreamAddCallback</name>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type><ref refid="group__Stream_1ga6d4e90ec5736f9728102be22d0559dfd" kindref="member">hipStreamCallback_t</ref></type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>userData</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Adds a callback to be called on the host after all currently enqueued items in the stream have completed. </para>        </briefdescription>
        <detaileddescription>
<para>For each cudaStreamAddCallback call, a callback will be executed exactly once. The callback will block later work in the stream until it is finished. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Stream to add callback to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">callback</parametername>
</parameternamelist>
<parameterdescription>
<para>- The function to call once preceding stream operations are complete </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">userData</parametername>
</parameternamelist>
<parameterdescription>
<para>- User specified data to be passed to the callback function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>- Reserved for future use, must be 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidResourceHandle, #hipErrorNotSupported</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>, <ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>, <ref refid="group__Stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e" kindref="member">hipStreamQuery</ref>, <ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>, <ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>, <ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref>, <ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventCreateWithFlags</definition>
        <argsstring>(hipEvent_t *event, unsigned flags)</argsstring>
        <name>hipEventCreateWithFlags</name>
        <param>
          <type>hipEvent_t *</type>
          <declname>event</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Create an event with the specified flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the newly created event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to control event behavior. Valid values are <ref refid="group__GlobalDefs_1ga122a5853359eba97cf047ddd153740f0" kindref="member">hipEventDefault</ref>, <ref refid="group__GlobalDefs_1gafa1c076a5b991763a98695063f1ea11d" kindref="member">hipEventBlockingSync</ref>, <ref refid="group__GlobalDefs_1ga3c0f44a85e36a4c67671da6bcdad0351" kindref="member">hipEventDisableTiming</ref>, <ref refid="group__GlobalDefs_1ga0f01d74059baa704e42aeff8222166bb" kindref="member">hipEventInterprocess</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
<ref refid="group__GlobalDefs_1ga122a5853359eba97cf047ddd153740f0" kindref="member">hipEventDefault</ref> : Default flag. The event will use active synchronization and will support timing. Blocking synchronization provides lowest possible latency at the expense of dedicating a CPU to poll on the eevent. <ref refid="group__GlobalDefs_1gafa1c076a5b991763a98695063f1ea11d" kindref="member">hipEventBlockingSync</ref> : The event will use blocking synchronization : if hipEventSynchronize is called on this event, the thread will block until the event completes. This can increase latency for the synchroniation but can result in lower power and more resources for other CPU threads. <ref refid="group__GlobalDefs_1ga3c0f44a85e36a4c67671da6bcdad0351" kindref="member">hipEventDisableTiming</ref> : Disable recording of timing information. On ROCM platform, timing information is always recorded and this flag has no performance benefit.</para><para><simplesect kind="warning"><para>On HCC platform, hipEventInterprocess support is under development. Use of this flag will return an error.</para></simplesect>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInitializationError, #hipErrorInvalidValue, #hipErrorLaunchFailure, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>, <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref>, <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>, <ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventCreate</definition>
        <argsstring>(hipEvent_t *event)</argsstring>
        <name>hipEventCreate</name>
        <param>
          <type>hipEvent_t *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Create an event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the newly created event.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInitializationError, #hipErrorInvalidValue, #hipErrorLaunchFailure, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>, <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>, <ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery</ref>, <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref>, <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>, <ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="868" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventRecord</definition>
        <argsstring>(hipEvent_t event, hipStream_t stream)</argsstring>
        <name>hipEventRecord</name>
        <param>
          <type>hipEvent_t</type>
          <declname>event</declname>
        </param>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Record an event in the specified stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>event to record. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>stream in which to record event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInitializationError, #hipErrorInvalidResourceHandle, #hipErrorLaunchFailure</para></simplesect>
<ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery()</ref> or <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize()</ref> must be used to determine when the event transitions from &quot;recording&quot; (after <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref> is called) to &quot;recorded&quot; (when timestamps are set, if requested).</para><para>Events which are recorded in a non-NULL stream will transition to from recording to &quot;recorded&quot; state when they reach the head of the specified stream, after all previous commands in that stream have completed executing.</para><para>If <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref> has been previously called on this event, then this call will overwrite any existing state in event.</para><para>If this function is called on a an event that is currently being recorded, results are undefined<itemizedlist>
<listitem><para>either outstanding recording may save state into the event, and the order is not guaranteed.</para></listitem></itemizedlist>
</para><para><simplesect kind="see"><para><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>, <ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>, <ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery</ref>, <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref>, <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>, <ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="901" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventDestroy</definition>
        <argsstring>(hipEvent_t event)</argsstring>
        <name>hipEventDestroy</name>
        <param>
          <type>hipEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Destroy the specified event. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to destroy. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInitializationError, #hipErrorInvalidValue, #hipErrorLaunchFailure</para></simplesect>
Releases memory associated with the event. If the event is recording but has not completed recording when <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy()</ref> is called, the function will return immediately and the completion_future resources will be released later, when the hipDevice is synchronized.</para><para><simplesect kind="see"><para><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>, <ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>, <ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery</ref>, <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref>, <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>, <ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref></para></simplesect>
<simplesect kind="return"><para>#hipSuccess </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="920" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventSynchronize</definition>
        <argsstring>(hipEvent_t event)</argsstring>
        <name>hipEventSynchronize</name>
        <param>
          <type>hipEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Wait for an event to complete. </para>        </briefdescription>
        <detaileddescription>
<para>This function will block until the event is ready, waiting for all previous work in the stream specified when event was recorded with <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref>.</para><para>If <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref> has not been called on <computeroutput>event</computeroutput>, this function returns immediately.</para><para>TODO-hcc - This function needs to support hipEventBlockingSync parameter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event on which to wait. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInitializationError, #hipErrorInvalidResourceHandle, #hipErrorLaunchFailure</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>, <ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>, <ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery</ref>, <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>, <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>, <ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventElapsedTime</definition>
        <argsstring>(float *ms, hipEvent_t start, hipEvent_t stop)</argsstring>
        <name>hipEventElapsedTime</name>
        <param>
          <type>float *</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>hipEvent_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>hipEvent_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
<para>Return the elapsed time between two events. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ms</parametername>
</parameternamelist>
<parameterdescription>
<para>: Return time between start and stop in ms. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start</parametername>
</parameternamelist>
<parameterdescription>
<para>: Start event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stop</parametername>
</parameternamelist>
<parameterdescription>
<para>: Stop event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorNotReady, #hipErrorInvalidResourceHandle, #hipErrorInitializationError, #hipErrorLaunchFailure</para></simplesect>
Computes the elapsed time between two events. Time is computed in ms, with a resolution of approximately 1 us.</para><para>Events which are recorded in a NULL stream will block until all commands on all other streams complete execution, and then record the timestamp.</para><para>Events which are recorded in a non-NULL stream will record their timestamp when they reach the head of the specified stream, after all previous commands in that stream have completed executing. Thus the time that the event recorded may be significantly after the host calls <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref>.</para><para>If <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref> has not been called on either event, then #hipErrorInvalidResourceHandle is returned. If <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref> has been called on both events, but the timestamp has not yet been recorded on one or both events (that is, <ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery()</ref> would return #hipErrorNotReady on at least one of the events), then #hipErrorNotReady is returned.</para><para><simplesect kind="see"><para><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>, <ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>, <ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery</ref>, <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>, <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>, <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="971" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipEventQuery</definition>
        <argsstring>(hipEvent_t event)</argsstring>
        <name>hipEventQuery</name>
        <param>
          <type>hipEvent_t</type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Query event status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to query. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorNotReady, #hipErrorInvalidResourceHandle, #hipErrorInvalidValue, #hipErrorInitializationError, #hipErrorLaunchFailure</para></simplesect>
Query the status of the specified event. This function will return #hipErrorNotReady if all commands in the appropriate stream (specified to <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref>) have completed. If that work has not completed, or if <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord()</ref> was not called on the event, then #hipSuccess is returned.</para><para><simplesect kind="see"><para><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>, <ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>, <ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>, <ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>, <ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref>, <ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga7c3e8663feebb7be9fd3a1e5139bcefc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipPointerGetAttributes</definition>
        <argsstring>(hipPointerAttribute_t *attributes, const void *ptr)</argsstring>
        <name>hipPointerGetAttributes</name>
        <param>
          <type>hipPointerAttribute_t *</type>
          <declname>attributes</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Return attributes for the specified pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attributes</parametername>
</parameternamelist>
<parameterdescription>
<para>for the specified pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to get attributes for</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" kindref="member">hipGetDeviceCount</ref>, <ref refid="group__Device_1ga7e0e2e8c5f78e3c7449764657c254e0a" kindref="member">hipGetDevice</ref>, <ref refid="group__Device_1ga43c1e7f15925eeb762195ccb5e063eae" kindref="member">hipSetDevice</ref>, <ref refid="group__Device_1gaf1e365e1d17cf40644d1470de4817c8e" kindref="member">hipChooseDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1023" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMalloc</definition>
        <argsstring>(void **ptr, size_t size)</argsstring>
        <name>hipMalloc</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate memory on the default accelerator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested memory size</para></parameterdescription>
</parameteritem>
</parameterlist>
If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation, #hipErrorInvalidValue (bad context, null *ptr)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>, <ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>, <ref refid="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" kindref="member">hipMallocArray</ref>, <ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>, hipMalloc3D, <ref refid="group__Memory_1ga6b3423ded4fe1c64eb7b168cb569a6ea" kindref="member">hipMalloc3DArray</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1038" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga66399e729223ff5b66ffc16297c0710e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMallocHost</definition>
        <argsstring>(void **ptr, size_t size)</argsstring>
        <name>hipMallocHost</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate pinned host memory [Deprecated]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated host pinned memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested memory size</para></parameterdescription>
</parameteritem>
</parameterlist>
If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation</para></simplesect>
<xrefsect id="deprecated_1_deprecated000001"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc()</ref> instead </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1053" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostMalloc</definition>
        <argsstring>(void **ptr, size_t size, unsigned int flags)</argsstring>
        <name>hipHostMalloc</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Allocate device accessible page locked host memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated host pinned memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested memory size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of host memory allocation</para></parameterdescription>
</parameteritem>
</parameterlist>
If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1ga6e54db382768827e84725632018307aa" kindref="member">hipSetDeviceFlags</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga0e35f3397f6ea9c3f47a17461ae01231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostAlloc</definition>
        <argsstring>(void **ptr, size_t size, unsigned int flags)</argsstring>
        <name>hipHostAlloc</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Allocate device accessible page locked host memory [Deprecated]. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated host pinned memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested memory size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of host memory allocation</para></parameterdescription>
</parameteritem>
</parameterlist>
If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation</para></simplesect>
<xrefsect id="deprecated_1_deprecated000002"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc()</ref> instead </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1084" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostGetDevicePointer</definition>
        <argsstring>(void **devPtr, void *hstPtr, unsigned int flags)</argsstring>
        <name>hipHostGetDevicePointer</name>
        <param>
          <type>void **</type>
          <declname>devPtr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hstPtr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Get Device pointer from Host Pointer allocated through hipHostMalloc. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dstPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Pointer mapped to passed host pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hstPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Host Pointer allocated through hipHostMalloc </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags to be passed for extension</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Device_1ga6e54db382768827e84725632018307aa" kindref="member">hipSetDeviceFlags</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1097" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga4d26915873b3e3534ceb4dc310f8709a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostGetFlags</definition>
        <argsstring>(unsigned int *flagsPtr, void *hostPtr)</argsstring>
        <name>hipHostGetFlags</name>
        <param>
          <type>unsigned int *</type>
          <declname>flagsPtr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>hostPtr</declname>
        </param>
        <briefdescription>
<para>Return flags associated with host pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">flagsPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory location to store flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hostPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Host Pointer allocated through hipHostMalloc </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gab8258f051e1a1f7385f794a15300e674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostRegister</definition>
        <argsstring>(void *hostPtr, size_t sizeBytes, unsigned int flags)</argsstring>
        <name>hipHostRegister</name>
        <param>
          <type>void *</type>
          <declname>hostPtr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Register host memory so it can be accessed from the current device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">hostPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to host memory to be registered. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the host memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags.</parametername>
</parameternamelist>
<parameterdescription>
<para>See below.</para></parameterdescription>
</parameteritem>
</parameterlist>
Flags:<itemizedlist>
<listitem><para><ref refid="group__GlobalDefs_1gac7c100d241ff84ad10109bb00b7b25dc" kindref="member">hipHostRegisterDefault</ref> Memory is Mapped and Portable</para></listitem><listitem><para><ref refid="group__GlobalDefs_1ga2db444f2315d412d3c7ba80ec6049583" kindref="member">hipHostRegisterPortable</ref> Memory is considered registered by all contexts. HIP only supports one context so this is always assumed true.</para></listitem><listitem><para><ref refid="group__GlobalDefs_1gacfa4edcfcb39fc61bff6bdecb14d7618" kindref="member">hipHostRegisterMapped</ref> Map the allocation into the address space for the current device. The device pointer can be obtained with <ref refid="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" kindref="member">hipHostGetDevicePointer</ref>.</para></listitem></itemizedlist>
</para><para>After registering the memory, use <ref refid="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" kindref="member">hipHostGetDevicePointer</ref> to obtain the mapped device pointer. On many systems, the mapped device pointer will have a different value than the mapped host pointer. Applications must use the device pointer in device code, and the host pointer in device code.</para><para>On some systems, registered memory is pinned. On some systems, registered memory may not be actually be pinned but uses OS or hardware facilities to all GPU access to the host memory.</para><para>Developers are strongly encouraged to register memory blocks which are aligned to the host cache-line size. (typically 64-bytes but can be obtains from the CPUID instruction).</para><para>If registering non-aligned pointers, the application must take care when register pointers from the same cache line on different devices. HIP&apos;s coarse-grained synchronization model does not guarantee correct results if different devices write to different parts of the same cache block - typically one of the writes will &quot;win&quot; and overwrite data from the other registered memory region.</para><para><simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c9e1810b9f5858d36c4d28c91c86924" kindref="member">hipHostUnregister</ref>, <ref refid="group__Memory_1ga4d26915873b3e3534ceb4dc310f8709a" kindref="member">hipHostGetFlags</ref>, <ref refid="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" kindref="member">hipHostGetDevicePointer</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga4c9e1810b9f5858d36c4d28c91c86924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostUnregister</definition>
        <argsstring>(void *hostPtr)</argsstring>
        <name>hipHostUnregister</name>
        <param>
          <type>void *</type>
          <declname>hostPtr</declname>
        </param>
        <briefdescription>
<para>Un-register host pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hostPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>Host pointer previously registered with <ref refid="group__Memory_1gab8258f051e1a1f7385f794a15300e674" kindref="member">hipHostRegister</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Error code</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gab8258f051e1a1f7385f794a15300e674" kindref="member">hipHostRegister</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga805c7320498926e444616fe090c727ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMallocPitch</definition>
        <argsstring>(void **ptr, size_t *pitch, size_t width, size_t height)</argsstring>
        <name>hipMallocPitch</name>
        <param>
          <type>void **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Allocates at least width (in bytes) * height bytes of linear memory Padding may occur to ensure alighnment requirements are met for the given row The change in width size due to padding will be returned in *pitch. </para>        </briefdescription>
        <detaileddescription>
<para>Currently the alignment is set to 128 bytes</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the allocated device memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch for allocation (in bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested pitched allocation width (in bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested pitched allocation height</para></parameterdescription>
</parameteritem>
</parameterlist>
If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.</para><para><simplesect kind="return"><para>Error code</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>, <ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>, <ref refid="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" kindref="member">hipMallocArray</ref>, <ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref>, hipMalloc3D, <ref refid="group__Memory_1ga6b3423ded4fe1c64eb7b168cb569a6ea" kindref="member">hipMalloc3DArray</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>hipFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by the hcc hip memory allocation API. </para>        </briefdescription>
        <detaileddescription>
<para>This API performs an implicit <ref refid="group__Device_1gaefdc2847fb1d6c3fb1354e827a191ebd" kindref="member">hipDeviceSynchronize()</ref> call. If pointer is NULL, the hip runtime is initialized and hipSuccess is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess </para></simplesect>
<simplesect kind="return"><para>#hipErrorInvalidDevicePointer (if pointer is invalid, including host pointers allocated with hipHostMalloc)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>, <ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>, <ref refid="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" kindref="member">hipMallocArray</ref>, <ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref>, hipMalloc3D, <ref refid="group__Memory_1ga6b3423ded4fe1c64eb7b168cb569a6ea" kindref="member">hipMalloc3DArray</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga28d7d92836116dfadeb62e416ee887d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipFreeHost</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>hipFreeHost</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by the hcc hip host memory allocation API. </para>        </briefdescription>
        <detaileddescription>
<para>[Deprecated]</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue (if pointer is invalid, including device pointers allocated with hipMalloc)</para></simplesect>
<xrefsect id="deprecated_1_deprecated000003"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree()</ref> instead </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipHostFree</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>hipHostFree</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by the hcc hip host memory allocation API This API performs an implicit <ref refid="group__Device_1gaefdc2847fb1d6c3fb1354e827a191ebd" kindref="member">hipDeviceSynchronize()</ref> call. </para>        </briefdescription>
        <detaileddescription>
<para>If pointer is NULL, the hip runtime is initialized and hipSuccess is returned.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to be freed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue (if pointer is invalid, including device pointers allocated with hipMalloc)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>, <ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>, <ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>, <ref refid="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" kindref="member">hipMallocArray</ref>, <ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>, hipMalloc3D, <ref refid="group__Memory_1ga6b3423ded4fe1c64eb7b168cb569a6ea" kindref="member">hipMalloc3DArray</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gac1a055d288302edd641c6d7416858e1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpy</definition>
        <argsstring>(void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind)</argsstring>
        <name>hipMemcpy</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Copy data from src to dst. </para>        </briefdescription>
        <detaileddescription>
<para>It supports memory from host to device, device to host, device to device and host to host The src and dst must not overlap.</para><para>For hipMemcpy, the copy is always performed by the current device (set by hipSetDevice). For multi-gpu or peer-to-peer configurations, it is recommended to set the current device to the device where the src data is physically located. For optimal peer-to-peer copies, the copy device must be able to access the src and dst pointers (by calling hipDeviceEnablePeerAccess with copy agent as the current device and src/dest as the peerDevice argument. if this is not done, the hipMemcpy will still work, but will perform the copy using a staging buffer on the host.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">copyType</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory copy type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree, #hipErrorUnknowni</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaa415ecdd2535e1eb618ed8a31a6f03af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyHtoD</definition>
        <argsstring>(hipDeviceptr_t dst, void *src, size_t sizeBytes)</argsstring>
        <name>hipMemcpyHtoD</name>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
<para>Copy data from Host to Device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorDeInitialized, #hipErrorNotInitialized, #hipErrorInvalidContext, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyDtoH</definition>
        <argsstring>(void *dst, hipDeviceptr_t src, size_t sizeBytes)</argsstring>
        <name>hipMemcpyDtoH</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
<para>Copy data from Device to Host. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorDeInitialized, #hipErrorNotInitialized, #hipErrorInvalidContext, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyDtoD</definition>
        <argsstring>(hipDeviceptr_t dst, hipDeviceptr_t src, size_t sizeBytes)</argsstring>
        <name>hipMemcpyDtoD</name>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
<para>Copy data from Device to Device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorDeInitialized, #hipErrorNotInitialized, #hipErrorInvalidContext, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyHtoDAsync</definition>
        <argsstring>(hipDeviceptr_t dst, void *src, size_t sizeBytes, hipStream_t stream)</argsstring>
        <name>hipMemcpyHtoDAsync</name>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Copy data from Host to Device asynchronously. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorDeInitialized, #hipErrorNotInitialized, #hipErrorInvalidContext, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyDtoHAsync</definition>
        <argsstring>(void *dst, hipDeviceptr_t src, size_t sizeBytes, hipStream_t stream)</argsstring>
        <name>hipMemcpyDtoHAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Copy data from Device to Host asynchronously. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorDeInitialized, #hipErrorNotInitialized, #hipErrorInvalidContext, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyDtoDAsync</definition>
        <argsstring>(hipDeviceptr_t dst, hipDeviceptr_t src, size_t sizeBytes, hipStream_t stream)</argsstring>
        <name>hipMemcpyDtoDAsync</name>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Copy data from Device to Device asynchronously. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorDeInitialized, #hipErrorNotInitialized, #hipErrorInvalidContext, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para>hipArrayCreate, hipArrayDestroy, hipArrayGetDescriptor, hipMemAlloc, hipMemAllocHost, hipMemAllocPitch, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, <ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>, hipMemcpyAtoHAsync, hipMemcpyDtoA, <ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>, <ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>, <ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>, <ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>, <ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>, hipMemcpyHtoAAsync, <ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>, hipMemFree, hipMemFreeHost, <ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>, <ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>, hipMemHostAlloc, hipMemHostGetDevicePointer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga21dddb880b518c808f89b4a88da66625" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyToSymbol</definition>
        <argsstring>(const void *symbolName, const void *src, size_t sizeBytes, size_t offset __dparm(0), hipMemcpyKind kind __dparm(hipMemcpyHostToDevice))</argsstring>
        <name>hipMemcpyToSymbol</name>
        <param>
          <type>const void *</type>
          <declname>symbolName</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>size_t offset </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <param>
          <type>hipMemcpyKind kind </type>
          <declname>__dparm</declname>
          <array>hipMemcpyHostToDevice</array>
        </param>
        <briefdescription>
<para>Copies <computeroutput>sizeBytes</computeroutput> bytes from the memory area pointed to by <computeroutput>src</computeroutput> to the memory area pointed to by <computeroutput>offset</computeroutput> bytes from the start of symbol <computeroutput>symbol</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The memory areas may not overlap. Symbol can either be a variable that resides in global or constant memory space, or it can be a character string, naming a variable that resides in global or constant memory space. Kind can be either hipMemcpyHostToDevice or hipMemcpyDeviceToDevice TODO: cudaErrorInvalidSymbol and cudaErrorInvalidMemcpyDirection is not supported, use hipErrorUnknown for now.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">symbolName</parametername>
</parameternamelist>
<parameterdescription>
<para>- Symbol destination on device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data size in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- Offset from start of symbol in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree, #hipErrorUnknown</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, hipMemcpy2DFromArray, hipMemcpyArrayToArray, hipMemcpy2DArrayToArray, hipMemcpyFromSymbol, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpyToArrayAsync, hipMemcpy2DToArrayAsync, hipMemcpyFromArrayAsync, hipMemcpy2DFromArrayAsync, <ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync</ref>, hipMemcpyFromSymbolAsync </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gae8ba000d414eef829957648c24cced5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipGetSymbolAddress</definition>
        <argsstring>(void **devPtr, const void *symbolName)</argsstring>
        <name>hipGetSymbolAddress</name>
        <param>
          <type>void **</type>
          <declname>devPtr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>symbolName</declname>
        </param>
        <briefdescription>
<para>Copies the memory address of symbol <computeroutput>symbolName</computeroutput> to <computeroutput>devPtr</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">symbolName</parametername>
</parameternamelist>
<parameterdescription>
<para>- Symbol on device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to a pointer to the memory referred to by the symbol </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorNotInitialized, #hipErrorNotFound</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga5ab6cb64d6d30236423969b5a0108230" kindref="member">hipGetSymbolSize</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, hipMemcpyFromSymbol, <ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync</ref>, hipMemcpyFromSymbolAsync </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga5ab6cb64d6d30236423969b5a0108230" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipGetSymbolSize</definition>
        <argsstring>(size_t *size, const void *symbolName)</argsstring>
        <name>hipGetSymbolSize</name>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>symbolName</declname>
        </param>
        <briefdescription>
<para>Copies the size of symbol <computeroutput>symbolName</computeroutput> to <computeroutput>size</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">symbolName</parametername>
</parameternamelist>
<parameterdescription>
<para>- Symbol on device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">size</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to the size of the symbol </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorNotInitialized, #hipErrorNotFound</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga5ab6cb64d6d30236423969b5a0108230" kindref="member">hipGetSymbolSize</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, hipMemcpyFromSymbol, <ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync</ref>, hipMemcpyFromSymbolAsync </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyToSymbolAsync</definition>
        <argsstring>(const void *symbolName, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemcpyToSymbolAsync</name>
        <param>
          <type>const void *</type>
          <declname>symbolName</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Copies <computeroutput>sizeBytes</computeroutput> bytes from the memory area pointed to by <computeroutput>src</computeroutput> to the memory area pointed to by <computeroutput>offset</computeroutput> bytes from the start of symbol <computeroutput>symbol</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para>The memory areas may not overlap. Symbol can either be a variable that resides in global or constant memory space, or it can be a character string, naming a variable that resides in global or constant memory space. Kind can be either hipMemcpyHostToDevice or hipMemcpyDeviceToDevice <ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync()</ref> is asynchronous with respect to the host, so the call may return before copy is complete. TODO: cudaErrorInvalidSymbol and cudaErrorInvalidMemcpyDirection is not supported, use hipErrorUnknown for now.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">symbolName</parametername>
</parameternamelist>
<parameterdescription>
<para>- Symbol destination on device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Data size in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>- Offset from start of symbol in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>- Type of transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree, #hipErrorUnknown</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, hipMemcpy2DFromArray, hipMemcpyArrayToArray, hipMemcpy2DArrayToArray, hipMemcpyFromSymbol, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref>, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpyToArrayAsync, hipMemcpy2DToArrayAsync, hipMemcpyFromArrayAsync, hipMemcpy2DFromArrayAsync, <ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync</ref>, hipMemcpyFromSymbolAsync </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1445" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga7cb22578a745b47ece6b53c6057be5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyFromSymbol</definition>
        <argsstring>(void *dst, const void *symbolName, size_t sizeBytes, size_t offset __dparm(0), hipMemcpyKind kind __dparm(hipMemcpyDeviceToHost))</argsstring>
        <name>hipMemcpyFromSymbol</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>symbolName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>size_t offset </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <param>
          <type>hipMemcpyKind kind </type>
          <declname>__dparm</declname>
          <array>hipMemcpyDeviceToHost</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1448" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga34899aa766023a8ffbaa6f086dc9d11f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyFromSymbolAsync</definition>
        <argsstring>(void *dst, const void *symbolName, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemcpyFromSymbolAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>symbolName</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyAsync</definition>
        <argsstring>(void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemcpyAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Copy data from src to dst asynchronously. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>If host or dest are not pinned, the memory copy will be performed synchronously. For best performance, use hipHostMalloc to allocate host memory that is transferred asynchronously.</para></simplesect>
<simplesect kind="warning"><para>on HCC hipMemcpyAsync does not support overlapped H2D and D2H copies. For hipMemcpy, the copy is always performed by the device associated with the specified stream.</para></simplesect>
For multi-gpu or peer-to-peer configurations, it is recommended to use a stream which is a attached to the device where the src data is physically located. For optimal peer-to-peer copies, the copy device must be able to access the src and dst pointers (by calling hipDeviceEnablePeerAccess with copy agent as the current device and src/dest as the peerDevice argument. if this is not done, the hipMemcpy will still work, but will perform the copy using a staging buffer on the host.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being copy from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">accelerator_view</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerator view which the copy is being enqueued </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree, #hipErrorUnknown</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, hipMemcpy2DFromArray, hipMemcpyArrayToArray, hipMemcpy2DArrayToArray, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, hipMemcpyFromSymbol, <ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>, hipMemcpyToArrayAsync, hipMemcpy2DToArrayAsync, hipMemcpyFromArrayAsync, hipMemcpy2DFromArrayAsync, <ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync</ref>, hipMemcpyFromSymbolAsync </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1482" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gac7441e74affcce4b8b69dba996c5ebc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemset</definition>
        <argsstring>(void *dst, int value, size_t sizeBytes)</argsstring>
        <name>hipMemset</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
<para>Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant byte value value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data being filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">constant</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorNotInitialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1494" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gab66cf8be5f4108218cc9a94d8c842e2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemsetD8</definition>
        <argsstring>(hipDeviceptr_t dest, unsigned char value, size_t sizeBytes)</argsstring>
        <name>hipMemsetD8</name>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
<para>Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant byte value value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Data ptr to be filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">constant</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Data size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorNotInitialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1505" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaab3fea033f93488f8c50ffc244396a78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemsetAsync</definition>
        <argsstring>(void *dst, int value, size_t sizeBytes, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemsetAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Fills the first sizeBytes bytes of the memory area pointed to by dev with the constant byte value value. </para>        </briefdescription>
        <detaileddescription>
<para><ref refid="group__Memory_1gaab3fea033f93488f8c50ffc244396a78" kindref="member">hipMemsetAsync()</ref> is asynchronous with respect to the host, so the call may return before the memset is complete. The operation can optionally be associated to a stream by passing a non-zero stream argument. If stream is non-zero, the operation may overlap with operations in other streams.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>- Value to set for each byte of specified memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size in bytes to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Stream identifier </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1522" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gae1e7b4c740cc02611ea8122bec376201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemset2D</definition>
        <argsstring>(void *dst, size_t pitch, int value, size_t width, size_t height)</argsstring>
        <name>hipMemset2D</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>height</declname>
        </param>
        <briefdescription>
<para>Fills the memory area pointed to by dst with the constant value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>- data size in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>- constant value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad890cda186f947512de1804cb06fb497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemset2DAsync</definition>
        <argsstring>(void *dst, size_t pitch, int value, size_t width, size_t height, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemset2DAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Fills asynchronously the memory area pointed to by dst with the constant value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to device memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pitch</parametername>
</parameternamelist>
<parameterdescription>
<para>- data size in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>- constant value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga3c04a21c9de9c55b3e47d8c87a0b0593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemset3D</definition>
        <argsstring>(hipPitchedPtr pitchedDevPtr, int value, hipExtent extent)</argsstring>
        <name>hipMemset3D</name>
        <param>
          <type>hipPitchedPtr</type>
          <declname>pitchedDevPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>hipExtent</type>
          <declname>extent</declname>
        </param>
        <briefdescription>
<para>Fills synchronously the memory area pointed to by pitchedDevPtr with the constant value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pitchedDevPtr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>- constant value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaabb1a77ae6411a8d1f509d3a287530ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemset3DAsync</definition>
        <argsstring>(hipPitchedPtr pitchedDevPtr, int value, hipExtent extent, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemset3DAsync</name>
        <param>
          <type>hipPitchedPtr</type>
          <declname>pitchedDevPtr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>hipExtent</type>
          <declname>extent</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Fills asynchronously the memory area pointed to by pitchedDevPtr with the constant value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pitchedDevPtr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>- constant value to be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extent</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorMemoryFree </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1570" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga311c3e246a21590de14478b8bd063be2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemGetInfo</definition>
        <argsstring>(size_t *free, size_t *total)</argsstring>
        <name>hipMemGetInfo</name>
        <param>
          <type>size_t *</type>
          <declname>free</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>total</declname>
        </param>
        <briefdescription>
<para>Query memory info. </para>        </briefdescription>
        <detaileddescription>
<para>Return snapshot of free memory, and total allocatable memory on the device.</para><para>Returns in *free a snapshot of the current free memory. <simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice, #hipErrorInvalidValue </para></simplesect>
<simplesect kind="warning"><para>On HCC, the free memory only accounts for memory allocated by this process and may be optimistic. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1581" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaf7e9522b8fd7bae6cc1bf2e3238fd20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemPtrGetInfo</definition>
        <argsstring>(void *ptr, size_t *size)</argsstring>
        <name>hipMemPtrGetInfo</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1584" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMallocArray</definition>
        <argsstring>(hipArray **array, const hipChannelFormatDesc *desc, size_t width, size_t height __dparm(0), unsigned int flags __dparm(hipArrayDefault))</argsstring>
        <name>hipMallocArray</name>
        <param>
          <type>hipArray **</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const hipChannelFormatDesc *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t height </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <param>
          <type>unsigned int flags </type>
          <declname>__dparm</declname>
          <array>hipArrayDefault</array>
        </param>
        <briefdescription>
<para>Allocate an array on the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">array</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocated array in device memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested channel format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested array allocation width </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested array allocation height </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested properties of allocated array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>, <ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>, <ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>, <ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaee4c2e74e37cf448380e4b69688a20f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipArrayCreate</definition>
        <argsstring>(hipArray **pHandle, const HIP_ARRAY_DESCRIPTOR *pAllocateArray)</argsstring>
        <name>hipArrayCreate</name>
        <param>
          <type>hipArray **</type>
          <declname>pHandle</declname>
        </param>
        <param>
          <type>const HIP_ARRAY_DESCRIPTOR *</type>
          <declname>pAllocateArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga5d24dbee76e1b894e6af830ad06fb168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipArray3DCreate</definition>
        <argsstring>(hipArray **array, const HIP_ARRAY_DESCRIPTOR *pAllocateArray)</argsstring>
        <name>hipArray3DCreate</name>
        <param>
          <type>hipArray **</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const HIP_ARRAY_DESCRIPTOR *</type>
          <declname>pAllocateArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gad12f684263bbc92690553af2aa918fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMalloc3D</definition>
        <argsstring>(hipPitchedPtr *pitchedDevPtr, hipExtent extent)</argsstring>
        <name>hipMalloc3D</name>
        <param>
          <type>hipPitchedPtr *</type>
          <declname>pitchedDevPtr</declname>
        </param>
        <param>
          <type>hipExtent</type>
          <declname>extent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gae29935073517245c69bc64790dd2747a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipFreeArray</definition>
        <argsstring>(hipArray *array)</argsstring>
        <name>hipFreeArray</name>
        <param>
          <type>hipArray *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Frees an array on the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to array to free </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInitializationError</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>, <ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>, <ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>, <ref refid="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" kindref="member">hipMallocArray</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga6b3423ded4fe1c64eb7b168cb569a6ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMalloc3DArray</definition>
        <argsstring>(hipArray **array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)</argsstring>
        <name>hipMalloc3DArray</name>
        <param>
          <type>hipArray **</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const struct hipChannelFormatDesc *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>struct hipExtent</type>
          <declname>extent</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Allocate an array on the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">array</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to allocated array in device memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">desc</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested channel format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extent</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested array allocation width, height and depth </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested properties of allocated array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorMemoryAllocation</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>, <ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>, <ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>, <ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>, <ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref>, <ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpy2D</definition>
        <argsstring>(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)</argsstring>
        <name>hipMemcpy2D</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dpitch</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>spitch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dpitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of destination memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of source memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of matrix transfer (columns in bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of matrix transfer (rows) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaa6913c5738f524d8fd043ab6f2c0e5ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyParam2D</definition>
        <argsstring>(const hip_Memcpy2D *pCopy)</argsstring>
        <name>hipMemcpyParam2D</name>
        <param>
          <type>const hip_Memcpy2D *</type>
          <declname>pCopy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpy2DAsync</definition>
        <argsstring>(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemcpy2DAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dpitch</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>spitch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dpitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of destination memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of source memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of matrix transfer (columns in bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of matrix transfer (rows) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of transfer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpy2DToArray</definition>
        <argsstring>(hipArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)</argsstring>
        <name>hipMemcpy2DToArray</name>
        <param>
          <type>hipArray *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>wOffset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hOffset</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>spitch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dpitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of destination memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of source memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of matrix transfer (columns in bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of matrix transfer (rows) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyToArray</definition>
        <argsstring>(hipArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, hipMemcpyKind kind)</argsstring>
        <name>hipMemcpyToArray</name>
        <param>
          <type>hipArray *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>wOffset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hOffset</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dpitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of destination memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Source memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spitch</parametername>
</parameternamelist>
<parameterdescription>
<para>Pitch of source memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of matrix transfer (columns in bytes) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of matrix transfer (rows) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyFromArray</definition>
        <argsstring>(void *dst, hipArray_const_t srcArray, size_t wOffset, size_t hOffset, size_t count, hipMemcpyKind kind)</argsstring>
        <name>hipMemcpyFromArray</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>hipArray_const_t</type>
          <declname>srcArray</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>wOffset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>hOffset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>hipMemcpyKind</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Source memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">woffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Source starting X offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Source starting Y offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes to copy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kind</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of transfer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyAtoH</definition>
        <argsstring>(void *dst, hipArray *srcArray, size_t srcOffset, size_t count)</argsstring>
        <name>hipMemcpyAtoH</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>hipArray *</type>
          <declname>srcArray</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>srcOffset</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Source array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcoffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in bytes of source array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory copy in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyHtoA</definition>
        <argsstring>(hipArray *dstArray, size_t dstOffset, const void *srcHost, size_t count)</argsstring>
        <name>hipMemcpyHtoA</name>
        <param>
          <type>hipArray *</type>
          <declname>dstArray</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dstOffset</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>srcHost</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dstArray</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in bytes of destination array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcHost</parametername>
</parameternamelist>
<parameterdescription>
<para>Source host pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of memory copy in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Memory_1ga38facb98eb1ae8206376c3c48bf5c444" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpy3D</definition>
        <argsstring>(const struct hipMemcpy3DParms *p)</argsstring>
        <name>hipMemcpy3D</name>
        <param>
          <type>const struct hipMemcpy3DParms *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Copies data between host and device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>3D memory copy parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidPitchValue, #hipErrorInvalidDevicePointer, #hipErrorInvalidMemcpyDirection</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>, <ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>, <ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>, <ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>, <ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>, <ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PeerToPeer_1ga0a1c9ccd775758d9d7d5b5a1f525b719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceCanAccessPeer</definition>
        <argsstring>(int *canAccessPeer, int deviceId, int peerDeviceId)</argsstring>
        <name>hipDeviceCanAccessPeer</name>
        <param>
          <type>int *</type>
          <declname>canAccessPeer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>deviceId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>peerDeviceId</declname>
        </param>
        <briefdescription>
<para>Determine if a device can access a peer&apos;s memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">canAccessPeer</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns the peer access capability (0 or 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para>- device from where memory may be accessed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">peerDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>- device where memory is physically located</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns &quot;1&quot; in <computeroutput>canAccessPeer</computeroutput> if the specified <computeroutput>device</computeroutput> is capable of directly accessing memory physically located on peerDevice , or &quot;0&quot; if not.</para><para>Returns &quot;0&quot; in <computeroutput>canAccessPeer</computeroutput> if deviceId == peerDeviceId, and both are valid devices : a device is not a peer of itself.</para><para><simplesect kind="return"><para>#hipSuccess, </para></simplesect>
<simplesect kind="return"><para>#hipErrorInvalidDevice if deviceId or peerDeviceId are not valid devices </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1801" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PeerToPeer_1ga0caca59034134d7a7bb893cc1caa653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceEnablePeerAccess</definition>
        <argsstring>(int peerDeviceId, unsigned int flags)</argsstring>
        <name>hipDeviceEnablePeerAccess</name>
        <param>
          <type>int</type>
          <declname>peerDeviceId</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Enable direct access from current device&apos;s virtual address space to memory allocations physically located on a peer device. </para>        </briefdescription>
        <detaileddescription>
<para>Memory which already allocated on peer device will be mapped into the address space of the current device. In addition, all future memory allocations on peerDeviceId will be mapped into the address space of the current device when the memory is allocated. The peer memory remains accessible from the current device until a call to hipDeviceDisablePeerAccess or hipDeviceReset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerDeviceId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Returns #hipSuccess, #hipErrorInvalidDevice, #hipErrorInvalidValue, </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipErrorPeerAccessAlreadyEnabled if peer access is already enabled for this device. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PeerToPeer_1ga85030c72824fb60aaddc7374ab60481b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceDisablePeerAccess</definition>
        <argsstring>(int peerDeviceId)</argsstring>
        <name>hipDeviceDisablePeerAccess</name>
        <param>
          <type>int</type>
          <declname>peerDeviceId</declname>
        </param>
        <briefdescription>
<para>Disable direct access from current device&apos;s virtual address space to memory allocations physically located on a peer device. </para>        </briefdescription>
        <detaileddescription>
<para>Returns hipErrorPeerAccessNotEnabled if direct access to memory on peerDevice has not yet been enabled from the current device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerDeviceId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorPeerAccessNotEnabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemGetAddressRange</definition>
        <argsstring>(hipDeviceptr_t *pbase, size_t *psize, hipDeviceptr_t dptr)</argsstring>
        <name>hipMemGetAddressRange</name>
        <param>
          <type>hipDeviceptr_t *</type>
          <declname>pbase</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>psize</declname>
        </param>
        <param>
          <type>hipDeviceptr_t</type>
          <declname>dptr</declname>
        </param>
        <briefdescription>
<para>Get information on memory allocations. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pbase</parametername>
</parameternamelist>
<parameterdescription>
<para>- BAse pointer address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">psize</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of allocation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dptr-</parametername>
</parameternamelist>
<parameterdescription>
<para>Device Pointer</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevicePointer</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1848" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PeerToPeer_1ga5512f45e25c08052667c8ffe7162333b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyPeer</definition>
        <argsstring>(void *dst, int dstDeviceId, const void *src, int srcDeviceId, size_t sizeBytes)</argsstring>
        <name>hipMemcpyPeer</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstDeviceId</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcDeviceId</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <briefdescription>
<para>Copies memory from one device to memory on another device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>- Destination device pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstDeviceId</parametername>
</parameternamelist>
<parameterdescription>
<para>- Destination device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>- Source device pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcDeviceId</parametername>
</parameternamelist>
<parameterdescription>
<para>- Source device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of memory copy in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1866" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__PeerToPeer_1ga6f500e146a98bb41a5972fe091fcc4b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipMemcpyPeerAsync</definition>
        <argsstring>(void *dst, int dstDeviceId, const void *src, int srcDevice, size_t sizeBytes, hipStream_t stream __dparm(0))</argsstring>
        <name>hipMemcpyPeerAsync</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dstDeviceId</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srcDevice</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeBytes</declname>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Copies memory from one device to memory on another device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>- Destination device pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dstDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>- Destination device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>- Source device pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">srcDevice</parametername>
</parameternamelist>
<parameterdescription>
<para>- Source device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>- Size of memory copy in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>- Stream identifier</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue, #hipErrorInvalidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1881" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga01baa652dda5815c594d047060496caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipInit</definition>
        <argsstring>(unsigned int flags)</argsstring>
        <name>hipInit</name>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Explicitly initializes the HIP runtime. </para>        </briefdescription>
        <detaileddescription>
<para>Most HIP APIs implicitly initialize the HIP runtime. This API provides control over the timing of the initialization. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1906" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxCreate</definition>
        <argsstring>(hipCtx_t *ctx, unsigned int flags, hipDevice_t device)</argsstring>
        <name>hipCtxCreate</name>
        <param>
          <type>hipCtx_t *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>hipDevice_t</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Create a context and set it as current/ default context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">associated</parametername>
</parameternamelist>
<parameterdescription>
<para>device handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1929" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxDestroy</definition>
        <argsstring>(hipCtx_t ctx)</argsstring>
        <name>hipCtxDestroy</name>
        <param>
          <type>hipCtx_t</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Destroy a HIP context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to destroy</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidValue</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>,<ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref> , <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1942" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxPopCurrent</definition>
        <argsstring>(hipCtx_t *ctx)</argsstring>
        <name>hipCtxPopCurrent</name>
        <param>
          <type>hipCtx_t *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Pop the current/default context and return the popped context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidContext</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxPushCurrent</definition>
        <argsstring>(hipCtx_t ctx)</argsstring>
        <name>hipCtxPushCurrent</name>
        <param>
          <type>hipCtx_t</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Push the context to be set as current/ default context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidContext</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref> , <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1968" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga834a192f70c2bfc0269c309436776feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxSetCurrent</definition>
        <argsstring>(hipCtx_t ctx)</argsstring>
        <name>hipCtxSetCurrent</name>
        <param>
          <type>hipCtx_t</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Set the passed context as current/default. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidContext</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref> , <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga741786101d348fdbfa1f64546860357a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxGetCurrent</definition>
        <argsstring>(hipCtx_t *ctx)</argsstring>
        <name>hipCtxGetCurrent</name>
        <param>
          <type>hipCtx_t *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Get the handle of the current/ default context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidContext</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="1994" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxGetDevice</definition>
        <argsstring>(hipDevice_t *device)</argsstring>
        <name>hipCtxGetDevice</name>
        <param>
          <type>hipDevice_t *</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Get the handle of the device associated with current/default context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">device</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidContext</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2008" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gabe5941e6798c71a8351b7d51311e7e8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxGetApiVersion</definition>
        <argsstring>(hipCtx_t ctx, int *apiVersion)</argsstring>
        <name>hipCtxGetApiVersion</name>
        <param>
          <type>hipCtx_t</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>apiVersion</declname>
        </param>
        <briefdescription>
<para>Returns the approximate HIP api version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>Context to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">apiVersion</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="warning"><para>The HIP feature set does not correspond to an exact CUDA SDK api revision. This function always set *apiVersion to 4 as an approximation though HIP supports some features which were introduced in later CUDA SDK revisions. HIP apps code should not rely on the api revision number here and should use arch feature flags to test device capabilities or conditional compilation.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2028" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gab10373068faafd3042c9003e2e6d905a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxGetCacheConfig</definition>
        <argsstring>(hipFuncCache_t *cacheConfig)</argsstring>
        <name>hipCtxGetCacheConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref> *</type>
          <declname>cacheConfig</declname>
        </param>
        <briefdescription>
<para>Set Cache configuration for a specific function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">cacheConfiguration</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="warning"><para>AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2044" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxSetCacheConfig</definition>
        <argsstring>(hipFuncCache_t cacheConfig)</argsstring>
        <name>hipCtxSetCacheConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref></type>
          <declname>cacheConfig</declname>
        </param>
        <briefdescription>
<para>Set L1/Shared cache partition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">cacheConfiguration</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="warning"><para>AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gad5c1d4ced27f584a74ed550dd002fa5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxSetSharedMemConfig</definition>
        <argsstring>(hipSharedMemConfig config)</argsstring>
        <name>hipCtxSetSharedMemConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" kindref="member">hipSharedMemConfig</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Set Shared memory bank configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sharedMemoryConfiguration</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="warning"><para>AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2076" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga3c78b22dd03435a7ca88621a45409565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxGetSharedMemConfig</definition>
        <argsstring>(hipSharedMemConfig *pConfig)</argsstring>
        <name>hipCtxGetSharedMemConfig</name>
        <param>
          <type><ref refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" kindref="member">hipSharedMemConfig</ref> *</type>
          <declname>pConfig</declname>
        </param>
        <briefdescription>
<para>Get Shared memory bank configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">sharedMemoryConfiguration</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="warning"><para>AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2092" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxSynchronize</definition>
        <argsstring>(void)</argsstring>
        <name>hipCtxSynchronize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Blocks until the default context has completed all preceding requested tasks. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="warning"><para>This function waits for all streams on the default context to complete execution, and then returns.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxGetFlags</definition>
        <argsstring>(unsigned int *flags)</argsstring>
        <name>hipCtxGetFlags</name>
        <param>
          <type>unsigned int *</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Return flags used for creating default context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga834dfd99d72082fe8770142fa30b30e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxEnablePeerAccess</definition>
        <argsstring>(hipCtx_t peerCtx, unsigned int flags)</argsstring>
        <name>hipCtxEnablePeerAccess</name>
        <param>
          <type>hipCtx_t</type>
          <declname>peerCtx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Enables direct access to memory allocations in a peer context. </para>        </briefdescription>
        <detaileddescription>
<para>Memory which already allocated on peer device will be mapped into the address space of the current device. In addition, all future memory allocations on peerDeviceId will be mapped into the address space of the current device when the memory is allocated. The peer memory remains accessible from the current device until a call to hipDeviceDisablePeerAccess or hipDeviceReset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerCtx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInvalidDevice, #hipErrorInvalidValue, #hipErrorPeerAccessAlreadyEnabled</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
<simplesect kind="warning"><para>PeerToPeer support is experimental. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gaf48e4e9c3b6bbad5deaeff10d2e28b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipCtxDisablePeerAccess</definition>
        <argsstring>(hipCtx_t peerCtx)</argsstring>
        <name>hipCtxDisablePeerAccess</name>
        <param>
          <type>hipCtx_t</type>
          <declname>peerCtx</declname>
        </param>
        <briefdescription>
<para>Disable direct access from current context&apos;s virtual address space to memory allocations physically located on a peer context.Disables direct access to memory allocations in a peer context and unregisters any registered allocations. </para>        </briefdescription>
        <detaileddescription>
<para>Returns hipErrorPeerAccessNotEnabled if direct access to memory on peerDevice has not yet been enabled from the current device.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">peerCtx</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorPeerAccessNotEnabled</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
<simplesect kind="warning"><para>PeerToPeer support is experimental. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga60d31f744991c6c568ec3027cf1fb8ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDevicePrimaryCtxGetState</definition>
        <argsstring>(hipDevice_t dev, unsigned int *flags, int *active)</argsstring>
        <name>hipDevicePrimaryCtxGetState</name>
        <param>
          <type>hipDevice_t</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned int *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>active</declname>
        </param>
        <briefdescription>
<para>Get the state of the primary context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Device</parametername>
</parameternamelist>
<parameterdescription>
<para>to get primary context flags for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to store flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">Pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>to store context state; 0 = inactive, 1 = active</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga7bbe8905908168909ddecd98cd34c1e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDevicePrimaryCtxRelease</definition>
        <argsstring>(hipDevice_t dev)</argsstring>
        <name>hipDevicePrimaryCtxRelease</name>
        <param>
          <type>hipDevice_t</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Release the primary context on the GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Device</parametername>
</parameternamelist>
<parameterdescription>
<para>which primary context is released</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
<simplesect kind="warning"><para>This function return #hipSuccess though doesn&apos;t release the primaryCtx by design on HIP/HCC path. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gab6e1014e9a4dbe281b84e38d89ff2409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDevicePrimaryCtxRetain</definition>
        <argsstring>(hipCtx_t *pctx, hipDevice_t dev)</argsstring>
        <name>hipDevicePrimaryCtxRetain</name>
        <param>
          <type>hipCtx_t *</type>
          <declname>pctx</declname>
        </param>
        <param>
          <type>hipDevice_t</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Retain the primary context on the GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">Returned</parametername>
</parameternamelist>
<parameterdescription>
<para>context handle of the new context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">Device</parametername>
</parameternamelist>
<parameterdescription>
<para>which primary context is released</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1gac2ca146e5d67b28d870dadd9dc3fc04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDevicePrimaryCtxReset</definition>
        <argsstring>(hipDevice_t dev)</argsstring>
        <name>hipDevicePrimaryCtxReset</name>
        <param>
          <type>hipDevice_t</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Resets the primary context on the GPU. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Device</parametername>
</parameternamelist>
<parameterdescription>
<para>which primary context is reset</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Context_1ga5cd8ba188e628274142dd44d39780436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDevicePrimaryCtxSetFlags</definition>
        <argsstring>(hipDevice_t dev, unsigned int flags)</argsstring>
        <name>hipDevicePrimaryCtxSetFlags</name>
        <param>
          <type>hipDevice_t</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Set flags for the primary context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">Device</parametername>
</parameternamelist>
<parameterdescription>
<para>for which the primary context flags are set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">New</parametername>
</parameternamelist>
<parameterdescription>
<para>flags for the device</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorContextAlreadyInUse</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>, <ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>, <ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>, <ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>, <ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>, <ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>, <ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>, <ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>, <ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>, <ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gadf6c74aaf7c22fea80e9ac3400d43704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGet</definition>
        <argsstring>(hipDevice_t *device, int ordinal)</argsstring>
        <name>hipDeviceGet</name>
        <param>
          <type>hipDevice_t *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ordinal</declname>
        </param>
        <briefdescription>
<para>Returns a handle to a compute device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">device</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ordinal</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga0a1cf94d2b571ca3279577d5af0d1672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceComputeCapability</definition>
        <argsstring>(int *major, int *minor, hipDevice_t device)</argsstring>
        <name>hipDeviceComputeCapability</name>
        <param>
          <type>int *</type>
          <declname>major</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>minor</declname>
        </param>
        <param>
          <type>hipDevice_t</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the compute capability of the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">major</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">minor</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga24df15e180a7b2b351cd362e5b7d2dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetName</definition>
        <argsstring>(char *name, int len, hipDevice_t device)</argsstring>
        <name>hipDeviceGetName</name>
        <param>
          <type>char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>hipDevice_t</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns an identifer string for the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gaaa961c8ec8047903617f4245fa50256a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetPCIBusId</definition>
        <argsstring>(char *pciBusId, int len, int device)</argsstring>
        <name>hipDeviceGetPCIBusId</name>
        <param>
          <type>char *</type>
          <declname>pciBusId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns a PCI Bus Id string for the device, overloaded to take int device ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pciBusId</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga2ec307f165d576c0c673a7b1fa9b0fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceGetByPCIBusId</definition>
        <argsstring>(int *device, const char *pciBusId)</argsstring>
        <name>hipDeviceGetByPCIBusId</name>
        <param>
          <type>int *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pciBusId</declname>
        </param>
        <briefdescription>
<para>Returns a handle to a compute device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">device</parametername>
</parameternamelist>
<parameterdescription>
<para>handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">PCI</parametername>
</parameternamelist>
<parameterdescription>
<para>Bus ID</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidDevice, #hipErrorInvalidValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga8991e535d0ef1ead0524e73364623041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDeviceTotalMem</definition>
        <argsstring>(size_t *bytes, hipDevice_t device)</argsstring>
        <name>hipDeviceTotalMem</name>
        <param>
          <type>size_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>hipDevice_t</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Returns the total amount of memory on the device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">bytes</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidDevice </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gaf6c342f52d2a29a0aca5cdd89b4dd47c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipDriverGetVersion</definition>
        <argsstring>(int *driverVersion)</argsstring>
        <name>hipDriverGetVersion</name>
        <param>
          <type>int *</type>
          <declname>driverVersion</declname>
        </param>
        <briefdescription>
<para>Returns the approximate HIP driver version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">driverVersion</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidValue</para></simplesect>
<simplesect kind="warning"><para>The HIP feature set does not correspond to an exact CUDA SDK driver revision. This function always set *driverVersion to 4 as an approximation though HIP supports some features which were introduced in later CUDA SDK revisions. HIP apps code should not rely on the driver revision number here and should use arch feature flags to test device capabilities or conditional compilation.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Driver_1gae8b7ba34d2e11e334650aa51a4dd87ee" kindref="member">hipRuntimeGetVersion</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gae8b7ba34d2e11e334650aa51a4dd87ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipRuntimeGetVersion</definition>
        <argsstring>(int *runtimeVersion)</argsstring>
        <name>hipRuntimeGetVersion</name>
        <param>
          <type>int *</type>
          <declname>runtimeVersion</declname>
        </param>
        <briefdescription>
<para>Returns the approximate HIP Runtime version. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">runtimeVersion</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>#hipSuccess, #hipErrorInavlidValue</para></simplesect>
<simplesect kind="warning"><para>On HIP/HCC path this function returns HIP runtime patch version however on HIP/NVCC path this function return CUDA runtime version.</para></simplesect>
<simplesect kind="see"><para><ref refid="group__Driver_1gaf6c342f52d2a29a0aca5cdd89b4dd47c" kindref="member">hipDriverGetVersion</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga31d806d976e91d36bd990ae3004d8760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleLoad</definition>
        <argsstring>(hipModule_t *module, const char *fname)</argsstring>
        <name>hipModuleLoad</name>
        <param>
          <type>hipModule_t *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>Loads code object from file into a hipModule_t. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fname</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">module</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorInvalidValue, hipErrorInvalidContext, hipErrorFileNotFound, hipErrorOutOfMemory, hipErrorSharedObjectInitFailed, hipErrorNotInitialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gae58e345f55bb3ec13dca80d2df88e0ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleUnload</definition>
        <argsstring>(hipModule_t module)</argsstring>
        <name>hipModuleUnload</name>
        <param>
          <type>hipModule_t</type>
          <declname>module</declname>
        </param>
        <briefdescription>
<para>Frees the module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipInvalidValue module is freed and the code objects associated with it are destroyed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2346" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga9648b457bb837838cb936b417b56a65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleGetFunction</definition>
        <argsstring>(hipFunction_t *function, hipModule_t module, const char *kname)</argsstring>
        <name>hipModuleGetFunction</name>
        <param>
          <type>hipFunction_t *</type>
          <declname>function</declname>
        </param>
        <param>
          <type>hipModule_t</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>kname</declname>
        </param>
        <briefdescription>
<para>Function with kname will be extracted if present in module. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">module</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kname</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">function</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorInvalidValue, hipErrorInvalidContext, hipErrorNotInitialized, hipErrorNotFound, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga8fd39dc48bcf28cc693ed7673c9f02c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipFuncGetAttributes</definition>
        <argsstring>(hipFuncAttributes *attr, const void *func)</argsstring>
        <name>hipFuncGetAttributes</name>
        <param>
          <type><ref refid="structhipFuncAttributes" kindref="compound">hipFuncAttributes</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Find out attributes for a given function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">attr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorInvalidDeviceFunction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga3e425a680285f495e776f096e9632c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleGetGlobal</definition>
        <argsstring>(hipDeviceptr_t *dptr, size_t *bytes, hipModule_t hmod, const char *name)</argsstring>
        <name>hipModuleGetGlobal</name>
        <param>
          <type>hipDeviceptr_t *</type>
          <declname>dptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>hipModule_t</type>
          <declname>hmod</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>returns device memory pointer and size of the kernel present in the module with symbol <computeroutput>name</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dptr</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bytes</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hmod</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorInvalidValue, hipErrorNotInitialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gad2efb1b3fddd4ec7197ef2e5b62c8411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t ihipModuleGetGlobal</definition>
        <argsstring>(hipDeviceptr_t *dptr, size_t *bytes, hipModule_t hmod, const char *name)</argsstring>
        <name>ihipModuleGetGlobal</name>
        <param>
          <type>hipDeviceptr_t *</type>
          <declname>dptr</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>hipModule_t</type>
          <declname>hmod</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2385" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga1ceb20d084d571c28282ee2fd052264c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleGetTexRef</definition>
        <argsstring>(textureReference **texRef, hipModule_t hmod, const char *name)</argsstring>
        <name>hipModuleGetTexRef</name>
        <param>
          <type>textureReference **</type>
          <declname>texRef</declname>
        </param>
        <param>
          <type>hipModule_t</type>
          <declname>hmod</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2388" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1gaabdbd73e952a741e861d01109c4790f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleLoadData</definition>
        <argsstring>(hipModule_t *module, const void *image)</argsstring>
        <name>hipModuleLoadData</name>
        <param>
          <type>hipModule_t *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>image</declname>
        </param>
        <briefdescription>
<para>builds module from code object which resides in host memory. </para>        </briefdescription>
        <detaileddescription>
<para>Image is pointer to that location.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">image</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">module</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorNotInitialized, hipErrorOutOfMemory, hipErrorNotInitialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2398" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga3e70722338894f48540c7be9a136af79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleLoadDataEx</definition>
        <argsstring>(hipModule_t *module, const void *image, unsigned int numOptions, hipJitOption *options, void **optionValues)</argsstring>
        <name>hipModuleLoadDataEx</name>
        <param>
          <type>hipModule_t *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>numOptions</declname>
        </param>
        <param>
          <type>hipJitOption *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>optionValues</declname>
        </param>
        <briefdescription>
<para>builds module from code object which resides in host memory. </para>        </briefdescription>
        <detaileddescription>
<para>Image is pointer to that location. Options are not used. hipModuleLoadData is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">image</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">module</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">number</parametername>
</parameternamelist>
<parameterdescription>
<para>of options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>for JIT </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">option</parametername>
</parameternamelist>
<parameterdescription>
<para>values for JIT</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorNotInitialized, hipErrorOutOfMemory, hipErrorNotInitialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Driver_1ga2e4de5937aa8171e9eda16c881ed0674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipModuleLaunchKernel</definition>
        <argsstring>(hipFunction_t f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, hipStream_t stream, void **kernelParams, void **extra)</argsstring>
        <name>hipModuleLaunchKernel</name>
        <param>
          <type>hipFunction_t</type>
          <declname>f</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gridDimX</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gridDimY</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>gridDimZ</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>blockDimX</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>blockDimY</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>blockDimZ</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>sharedMemBytes</declname>
        </param>
        <param>
          <type>hipStream_t</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>kernelParams</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
<para>launches kernel f with launch parameters and shared memory on stream with arguments passed to kernelparams or extra </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to launch. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gridDimX</parametername>
</parameternamelist>
<parameterdescription>
<para>X grid dimension specified as multiple of blockDimX. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gridDimY</parametername>
</parameternamelist>
<parameterdescription>
<para>Y grid dimension specified as multiple of blockDimY. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gridDimZ</parametername>
</parameternamelist>
<parameterdescription>
<para>Z grid dimension specified as multiple of blockDimZ. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockDimX</parametername>
</parameternamelist>
<parameterdescription>
<para>X block dimensions specified in work-items </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockDimY</parametername>
</parameternamelist>
<parameterdescription>
<para>Y grid dimension specified in work-items </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockDimZ</parametername>
</parameternamelist>
<parameterdescription>
<para>Z grid dimension specified in work-items </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sharedMemBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of dynamic shared memory to allocate for this kernel. The kernel can access this with HIP_DYNAMIC_SHARED. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream where the kernel should be dispatched. May be 0, in which case th default stream is used with associated synchronization rules. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">kernelParams</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extra</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to kernel arguments. These are passed directly to the kernel and must be in the memory layout and alignment expected by the kernel.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipInvalidDevice, hipErrorNotInitialized, hipErrorInvalidValue</para></simplesect>
<simplesect kind="warning"><para>kernellParams argument is not yet implemented in HIP. Please use extra instead. Please refer to hip_porting_driver_api.md for sample usage. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Profiler_1ga40aa20d731f9c8f0586127d589759e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipProfilerStart</definition>
        <argsstring>()</argsstring>
        <name>hipProfilerStart</name>
        <briefdescription>
<para>Start recording of profiling information When using this API, start the profiler with profiling disabled. </para>        </briefdescription>
        <detaileddescription>
<para>(<ndash/>startdisabled) <simplesect kind="warning"><para>: hipProfilerStart API is under development. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Profiler_1ga777994cae0f7bdef24131fc1f3ed626e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipProfilerStop</definition>
        <argsstring>()</argsstring>
        <name>hipProfilerStop</name>
        <briefdescription>
<para>Stop recording of profiling information. </para>        </briefdescription>
        <detaileddescription>
<para>When using this API, start the profiler with profiling disabled. (<ndash/>startdisabled) <simplesect kind="warning"><para>: hipProfilerStop API is under development. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gafd8c80f7e3b6426a630fff768409be70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipIpcGetMemHandle</definition>
        <argsstring>(hipIpcMemHandle_t *handle, void *devPtr)</argsstring>
        <name>hipIpcGetMemHandle</name>
        <param>
          <type><ref refid="structhipIpcMemHandle__t" kindref="compound">hipIpcMemHandle_t</ref> *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>devPtr</declname>
        </param>
        <briefdescription>
<para>Gets an interprocess memory handle for an existing device memory allocation. </para>        </briefdescription>
        <detaileddescription>
<para>Takes a pointer to the base of an existing device memory allocation created with hipMalloc and exports it for use in another process. This is a lightweight operation and may be called multiple times on an allocation without adverse effects.</para><para>If a region of memory is freed with hipFree and a subsequent call to hipMalloc returns memory with the same device address, hipIpcGetMemHandle will return a unique handle for the new memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- Pointer to user allocated hipIpcMemHandle to return the handle in. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Base pointer to previously allocated device memory</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorInvalidResourceHandle, hipErrorMemoryAllocation, hipErrorMapBufferObjectFailed, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga2ada334c986e10805d58167e260cb0df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipIpcOpenMemHandle</definition>
        <argsstring>(void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)</argsstring>
        <name>hipIpcOpenMemHandle</name>
        <param>
          <type>void **</type>
          <declname>devPtr</declname>
        </param>
        <param>
          <type><ref refid="structhipIpcMemHandle__t" kindref="compound">hipIpcMemHandle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process. </para>        </briefdescription>
        <detaileddescription>
<para>Maps memory exported from another process with hipIpcGetMemHandle into the current device address space. For contexts on different devices hipIpcOpenMemHandle can attempt to enable peer access between the devices as if the user called hipDeviceEnablePeerAccess. This behavior is controlled by the hipIpcMemLazyEnablePeerAccess flag. hipDeviceCanAccessPeer can determine if a mapping is possible.</para><para>Contexts that may open hipIpcMemHandles are restricted in the following way. hipIpcMemHandles from each device in a given process may only be opened by one context per device per other process.</para><para>Memory returned from hipIpcOpenMemHandle must be freed with hipIpcCloseMemHandle.</para><para>Calling hipFree on an exported memory region before calling hipIpcCloseMemHandle in the importing context will result in undefined behavior.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Returned device pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>- hipIpcMemHandle to open </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>- Flags for this operation. Must be specified as hipIpcMemLazyEnablePeerAccess</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorMapBufferObjectFailed, hipErrorInvalidResourceHandle, hipErrorTooManyPeers</para></simplesect>
<simplesect kind="note"><para>No guarantees are made about the address returned in <computeroutput>*devPtr</computeroutput>. In particular, multiple processes may not receive the same address for the same <computeroutput>handle</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2549" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gac2db0688a6a471e17ca631977e199da7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipIpcCloseMemHandle</definition>
        <argsstring>(void *devPtr)</argsstring>
        <name>hipIpcCloseMemHandle</name>
        <param>
          <type>void *</type>
          <declname>devPtr</declname>
        </param>
        <briefdescription>
<para>Close memory mapped with hipIpcOpenMemHandle. </para>        </briefdescription>
        <detaileddescription>
<para>Unmaps memory returnd by hipIpcOpenMemHandle. The original allocation in the exporting process as well as imported mappings in other processes will be unaffected.</para><para>Any resources used to enable peer access will be freed if this is the last mapping using them.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>devPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- Device pointer returned by hipIpcOpenMemHandle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipErrorMapBufferObjectFailed, hipErrorInvalidResourceHandle, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Clang_1ga61aa3baf383168cc638e01d9e8d8f229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipConfigureCall</definition>
        <argsstring>(dim3 gridDim, dim3 blockDim, size_t sharedMem __dparm(0), hipStream_t stream __dparm(0))</argsstring>
        <name>hipConfigureCall</name>
        <param>
          <type><ref refid="structdim3" kindref="compound">dim3</ref></type>
          <declname>gridDim</declname>
        </param>
        <param>
          <type><ref refid="structdim3" kindref="compound">dim3</ref></type>
          <declname>blockDim</declname>
        </param>
        <param>
          <type>size_t sharedMem </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <param>
          <type>hipStream_t stream </type>
          <declname>__dparm</declname>
          <array>0</array>
        </param>
        <briefdescription>
<para>Configure a kernel launch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">gridDim</parametername>
</parameternamelist>
<parameterdescription>
<para>grid dimension specified as multiple of blockDim. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">blockDim</parametername>
</parameternamelist>
<parameterdescription>
<para>block dimensions specified in work-items </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sharedMem</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of dynamic shared memory to allocate for this kernel. The kernel can access this with HIP_DYNAMIC_SHARED. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipInvalidDevice, hipErrorNotInitialized, hipErrorInvalidValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2598" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Clang_1ga047cff6205399540ebe31cdd11257c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipSetupArgument</definition>
        <argsstring>(const void *arg, size_t size, size_t offset)</argsstring>
        <name>hipSetupArgument</name>
        <param>
          <type>const void *</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Set a kernel argument. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>hipSuccess, hipInvalidDevice, hipErrorNotInitialized, hipErrorInvalidValue</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer the argument in host memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the argument. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset of the argument on the argument stack. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2611" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__Clang_1ga80f5f26fe76b213fbfd77e4fc9e04cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipLaunchByPtr</definition>
        <argsstring>(const void *func)</argsstring>
        <name>hipLaunchByPtr</name>
        <param>
          <type>const void *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
<para>Launch a kernel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">func</parametername>
</parameternamelist>
<parameterdescription>
<para>Kernel to launch.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hipSuccess, hipInvalidDevice, hipErrorNotInitialized, hipErrorInvalidValue </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2622" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga31285b05f702fd1ba9e18521d66b46d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipRegisterApiCallback</definition>
        <argsstring>(uint32_t id, void *fun, void *arg)</argsstring>
        <name>hipRegisterApiCallback</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Callback/Activity API. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga4ecde741bd062479038bfc1ce884832c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipRemoveApiCallback</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>hipRemoveApiCallback</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gaf0c6d0fd1ca5dbd144d7944d98e5e471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipRegisterActivityCallback</definition>
        <argsstring>(uint32_t id, void *fun, void *arg)</argsstring>
        <name>hipRegisterActivityCallback</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>fun</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gad0753126f1bdf30e248c7d4d84ddf5d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>hipError_t</type>
        <definition>hipError_t hipRemoveActivityCallback</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>hipRemoveActivityCallback</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1ga4dbbdc8a31c0ed42a86455be5ace08fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* hipApiName</definition>
        <argsstring>(const uint32_t &amp;id)</argsstring>
        <name>hipApiName</name>
        <param>
          <type>const uint32_t &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2647" column="1" bodyfile="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" bodystart="2647" bodyend="2647"/>
      </memberdef>
      <memberdef kind="function" id="group__API_1gacafd2da53a5fcf5e00457dcbc0efb7d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hipKernelNameRef</definition>
        <argsstring>(hipFunction_t f)</argsstring>
        <name>hipKernelNameRef</name>
        <param>
          <type>hipFunction_t</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h" line="2648" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains C function APIs for HIP runtime. </para>    </briefdescription>
    <detaileddescription>
<para>This file does not use any HCC builtin or special language extensions (-hc mode) ; those functions in hip_runtime.h. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>present<sp/>Advanced<sp/>Micro<sp/>Devices,<sp/>Inc.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="5"><highlight class="comment">of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="6"><highlight class="comment">in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="7"><highlight class="comment">to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="8"><highlight class="comment">copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="9"><highlight class="comment">furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in</highlight></codeline>
<codeline lineno="12"><highlight class="comment">all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="15"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="16"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="17"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="18"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="19"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment">THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HIP_INCLUDE_HIP_HCC_DETAIL_HIP_RUNTIME_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIP_INCLUDE_HIP_HCC_DETAIL_HIP_RUNTIME_API_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GENERIC_GRID_LAUNCH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GENERIC_GRID_LAUNCH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hcc_detail/host_defines.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hip_runtime_api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hcc_detail/driver_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hcc_detail/hip_texture_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hcc_detail/hip_surface_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEPRECATED(msg)<sp/>__declspec(deprecated(msg))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/>//<sp/>!defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEPRECATED(msg)<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>!defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEPRECATED_MSG<sp/>&quot;This<sp/>API<sp/>is<sp/>marked<sp/>as<sp/>deprecated<sp/>and<sp/>may<sp/>not<sp/>be<sp/>supported<sp/>in<sp/>future<sp/>releases.For<sp/>more<sp/>details<sp/>please<sp/>refer<sp/>https://github.com/ROCm-Developer-Tools/HIP/tree/master/docs/markdown/hip_deprecated_api_list&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__HCC__)<sp/>&amp;&amp;<sp/>(__hcc_workweek__<sp/>&lt;<sp/>16155)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#error(&quot;This<sp/>version<sp/>of<sp/>HIP<sp/>requires<sp/>a<sp/>newer<sp/>version<sp/>of<sp/>HCC.&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIP_LAUNCH_PARAM_BUFFER_POINTER<sp/>((void*)0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIP_LAUNCH_PARAM_BUFFER_SIZE<sp/>((void*)0x02)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIP_LAUNCH_PARAM_END<sp/>((void*)0x03)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__dparm(x)<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>__dparm(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Structure<sp/>definitions:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//---</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>API-visible<sp/>structures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipCtx_t*<sp/>hipCtx_t;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>many<sp/>APIs<sp/>also<sp/>use<sp/>integer<sp/>deviceIds<sp/>as<sp/>an<sp/>alternative<sp/>to<sp/>the<sp/>device<sp/>pointer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hipDevice_t;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipStream_t*<sp/>hipStream_t;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>IPC<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipIpcMemLazyEnablePeerAccess<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HIP_IPC_HANDLE_SIZE<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structhipIpcMemHandle__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">hipIpcMemHandle_st<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>reserved[HIP_IPC_HANDLE_SIZE];</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/><ref refid="structhipIpcMemHandle__t" kindref="compound">hipIpcMemHandle_t</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>IPC<sp/>event<sp/>handle<sp/>currently<sp/>unsupported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipIpcEventHandle_t;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipIpcEventHandle_t*<sp/>hipIpcEventHandle_t;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>END<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipModule_t*<sp/>hipModule_t;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipModuleSymbol_t*<sp/>hipFunction_t;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="structhipFuncAttributes" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhipFuncAttributes" kindref="compound">hipFuncAttributes</ref><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>binaryVersion;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cacheModeCA;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>constSizeBytes;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>localSizeBytes;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxDynamicSharedSizeBytes;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxThreadsPerBlock;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numRegs;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>preferredShmemCarveout;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ptxVersion;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sharedSizeBytes;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/><ref refid="structhipFuncAttributes" kindref="compound">hipFuncAttributes</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ihipEvent_t*<sp/>hipEvent_t;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>hipLimit_t<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>hipLimitMallocHeapSize<sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor">#define<sp/>hipStreamDefault<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x00<sp/><sp/></highlight></codeline>
<codeline lineno="128" refid="group__GlobalDefs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d" refkind="member"><highlight class="preprocessor">#define<sp/>hipStreamNonBlocking<sp/>0x01<sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group__GlobalDefs_1ga122a5853359eba97cf047ddd153740f0" refkind="member"><highlight class="preprocessor">#define<sp/>hipEventDefault<sp/>0x0<sp/><sp/></highlight></codeline>
<codeline lineno="133" refid="group__GlobalDefs_1gafa1c076a5b991763a98695063f1ea11d" refkind="member"><highlight class="preprocessor">#define<sp/>hipEventBlockingSync<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x1<sp/><sp/></highlight></codeline>
<codeline lineno="135" refid="group__GlobalDefs_1ga3c0f44a85e36a4c67671da6bcdad0351" refkind="member"><highlight class="preprocessor">#define<sp/>hipEventDisableTiming<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x2<sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="group__GlobalDefs_1ga0f01d74059baa704e42aeff8222166bb" refkind="member"><highlight class="preprocessor">#define<sp/>hipEventInterprocess<sp/>0x4<sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor">#define<sp/>hipEventReleaseToDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x40000000<sp/><sp/></highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor">#define<sp/>hipEventReleaseToSystem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x80000000<sp/><sp/></highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="group__GlobalDefs_1gad594ec51cb5b5e946c1e354bf80bddc7" refkind="member"><highlight class="preprocessor">#define<sp/>hipHostMallocDefault<sp/>0x0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="group__GlobalDefs_1ga99b7c2b08a834b4736bfdc24893a6bc5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipHostMallocPortable<sp/>0x1<sp/><sp/></highlight></codeline>
<codeline lineno="151" refid="group__GlobalDefs_1gaf6e07be144bb1031bfcf9816335906cc" refkind="member"><highlight class="preprocessor">#define<sp/>hipHostMallocMapped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x2<sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor">#define<sp/>hipHostMallocWriteCombined<sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group__GlobalDefs_1gac726701ac143539b0893c506377f44ee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipHostMallocCoherent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x40000000<sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor">#define<sp/>hipHostMallocNonCoherent<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x80000000<sp/><sp/></highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="group__GlobalDefs_1gac7c100d241ff84ad10109bb00b7b25dc" refkind="member"><highlight class="preprocessor">#define<sp/>hipHostRegisterDefault<sp/>0x0<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165" refid="group__GlobalDefs_1ga2db444f2315d412d3c7ba80ec6049583" refkind="member"><highlight class="preprocessor">#define<sp/>hipHostRegisterPortable<sp/>0x1<sp/><sp/></highlight></codeline>
<codeline lineno="166" refid="group__GlobalDefs_1gacfa4edcfcb39fc61bff6bdecb14d7618" refkind="member"><highlight class="preprocessor">#define<sp/>hipHostRegisterMapped<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x2<sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor">#define<sp/>hipHostRegisterIoMemory<sp/>0x4<sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="group__GlobalDefs_1ga9032d35eb7383948828ee48e1e19f5fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipDeviceScheduleAuto<sp/>0x0<sp/><sp/></highlight></codeline>
<codeline lineno="173" refid="group__GlobalDefs_1ga713d962bafb7758dc1ff0675e4239453" refkind="member"><highlight class="preprocessor">#define<sp/>hipDeviceScheduleSpin<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x1<sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor">#define<sp/>hipDeviceScheduleYield<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>0x2<sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor">#define<sp/>hipDeviceScheduleBlockingSync<sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipDeviceScheduleMask<sp/>0x7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipDeviceMapHost<sp/>0x8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipDeviceLmemResizeToMax<sp/>0x16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="group__GlobalDefs_1ga2cae862086a89539b3cf6906a458190c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipArrayDefault<sp/>0x00<sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor">#define<sp/>hipArrayLayered<sp/>0x01</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipArraySurfaceLoadStore<sp/>0x02</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipArrayCubemap<sp/>0x04</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>hipArrayTextureGather<sp/>0x08</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>@brief<sp/>hipJitOption</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@enum</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>Enumerations</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>hipJitOption<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionMaxRegisters<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionThreadsPerBlock,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionWallTime,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionInfoLogBuffer,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionInfoLogBufferSizeBytes,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionErrorLogBuffer,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionErrorLogBufferSizeBytes,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionOptimizationLevel,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionTargetFromContext,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionTarget,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionFallbackStrategy,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionGenerateDebugInfo,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionLogVerbose,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionGenerateLineInfo,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionCacheMode,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionSm3xOpt,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionFastCompile,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>hipJitOptionNumOptions</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}<sp/>hipJitOption;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref><sp/>{</highlight></codeline>
<codeline lineno="222" refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa0813fbaa008ce1231ff9fed3911eb3af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa0813fbaa008ce1231ff9fed3911eb3af" kindref="member">hipFuncCachePreferNone</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223" refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa9b34337dfbadba25ed2aa270bbcabc43" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa9b34337dfbadba25ed2aa270bbcabc43" kindref="member">hipFuncCachePreferShared</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="224" refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa636a3c140db6b9d4a8bf7d5a61c398c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa636a3c140db6b9d4a8bf7d5a61c398c5" kindref="member">hipFuncCachePreferL1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225" refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa0ddab0e840107634a152033103be44d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga86e5c5692645963a9a673e1aa88ba6caa0ddab0e840107634a152033103be44d7" kindref="member">hipFuncCachePreferEqual</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal">}<sp/><ref refid="group__GlobalDefs_1ga86e5c5692645963a9a673e1aa88ba6ca" kindref="member">hipFuncCache_t</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" kindref="member">hipSharedMemConfig</ref><sp/>{</highlight></codeline>
<codeline lineno="233" refid="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104eaf5b325c9b7bde878913f768eaba5014d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104eaf5b325c9b7bde878913f768eaba5014d" kindref="member">hipSharedMemBankSizeDefault</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="234" refid="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104ea0a95a6e0c33106c42d66ab9476ff954a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104ea0a95a6e0c33106c42d66ab9476ff954a" kindref="member">hipSharedMemBankSizeFourByte</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__GlobalDefs_1gga2e17b71d94ac350f2ccd914fd49d104ea64518b4f5a25f536c883330167e79258" kindref="member">hipSharedMemBankSizeEightByte</ref><sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><ref refid="group__GlobalDefs_1ga2e17b71d94ac350f2ccd914fd49d104e" kindref="member">hipSharedMemConfig</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="structdim3" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdim3" kindref="compound">dim3</ref><sp/>{</highlight></codeline>
<codeline lineno="246" refid="structdim3_1ac866c05f83a28dac20a153fc65b3b16c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structdim3_1ac866c05f83a28dac20a153fc65b3b16c" kindref="member">x</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="247" refid="structdim3_1a83e60e072f7e8bdfde6ac05053cbb370" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structdim3_1a83e60e072f7e8bdfde6ac05053cbb370" kindref="member">y</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="248" refid="structdim3_1a866e38993ecc4e76fd47311236c16b04" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structdim3_1a866e38993ecc4e76fd47311236c16b04" kindref="member">z</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structdim3" kindref="compound">dim3</ref>(uint32_t<sp/>_x<sp/>=<sp/>1,<sp/>uint32_t<sp/>_y<sp/>=<sp/>1,<sp/>uint32_t<sp/>_z<sp/>=<sp/>1)<sp/>:<sp/>x(_x),<sp/>y(_y),<sp/>z(_z){};</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">}<sp/><ref refid="structdim3" kindref="compound">dim3</ref>;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Doxygen<sp/>end<sp/>group<sp/>GlobalDefs</highlight></codeline>
<codeline lineno="259"><highlight class="comment"></highlight><highlight class="comment">//-------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>handle<sp/>allows<sp/>the<sp/>async<sp/>commands<sp/>to<sp/>use<sp/>the<sp/>stream<sp/>even<sp/>if<sp/>the<sp/>parent<sp/>hipStream_t<sp/>goes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>out-of-scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedef<sp/>class<sp/>ihipStream_t<sp/>*<sp/>hipStream_t;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>Opaque<sp/>structure<sp/>allows<sp/>the<sp/>true<sp/>event<sp/>(pointed<sp/>at<sp/>by<sp/>the<sp/>handle)<sp/>to<sp/>remain<sp/>&quot;live&quot;<sp/>even<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>surrounding<sp/>hipEvent_t<sp/>goes<sp/>out-of-scope.<sp/>This<sp/>is<sp/>handy<sp/>for<sp/>cases<sp/>where<sp/>the<sp/>hipEvent_t<sp/>goes</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>out-of-scope<sp/>but<sp/>the<sp/>true<sp/>event<sp/>is<sp/>being<sp/>written<sp/>by<sp/>some<sp/>async<sp/>queue<sp/>or<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>typedef<sp/>struct<sp/>hipEvent_t<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>struct<sp/>ihipEvent_t<sp/>*_handle;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">//}<sp/>hipEvent_t;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1gaefdc2847fb1d6c3fb1354e827a191ebd" kindref="member">hipDeviceSynchronize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga8d57161ae56a8edc46eeda447417bf6c" kindref="member">hipDeviceReset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga43c1e7f15925eeb762195ccb5e063eae" kindref="member">hipSetDevice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceId);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga7e0e2e8c5f78e3c7449764657c254e0a" kindref="member">hipGetDevice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>deviceId);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga8555d5c76d88c50ddbf54ae70b568394" kindref="member">hipGetDeviceCount</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>count);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga7080a145a4239a7276e0dc22062026c1" kindref="member">hipDeviceGetAttribute</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pi,<sp/>hipDeviceAttribute_t<sp/>attr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceId);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga32208513b7cd491f0cb5fc884053f790" kindref="member">hipGetDeviceProperties</ref>(hipDeviceProp_t*<sp/>prop,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceId);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1gaada3d30a46ae06f68cf1574f496b86ee" kindref="member">hipDeviceSetCacheConfig</ref>(hipFuncCache_t<sp/>cacheConfig);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga37057f9830ad6fab7ce5f05f6d3c89ab" kindref="member">hipDeviceGetCacheConfig</ref>(hipFuncCache_t*<sp/>cacheConfig);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga8edc85bb9637d6b1eda0d064d141a255" kindref="member">hipDeviceGetLimit</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>pValue,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>hipLimit_t<sp/>limit);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1gafdb33ef569eb89808fc5178d04b508ba" kindref="member">hipFuncSetCacheConfig</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>func,<sp/>hipFuncCache_t<sp/>config);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga1bb08f774a34a468d969a8a04791c9bb" kindref="member">hipDeviceGetSharedMemConfig</ref>(hipSharedMemConfig*<sp/>pConfig);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga9b1f279084e76691cedfbfadf9c717ee" kindref="member">hipDeviceSetSharedMemConfig</ref>(hipSharedMemConfig<sp/>config);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1ga6e54db382768827e84725632018307aa" kindref="member">hipSetDeviceFlags</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal">hipError_t<sp/><ref refid="group__Device_1gaf1e365e1d17cf40644d1470de4817c8e" kindref="member">hipChooseDevice</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipDeviceProp_t*<sp/>prop);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>doxygen<sp/>Device</highlight></codeline>
<codeline lineno="545"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__Error_1ga533daeb9114d7fc2db8d867adf9e419b" kindref="member">hipGetLastError</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">hipError_t<sp/><ref refid="group__Error_1ga1dd660bc739f7e13edd34615660f0148" kindref="member">hipPeekAtLastError</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__Error_1ga88c474d77635523dbf6ca67be7b56999" kindref="member">hipGetErrorName</ref>(hipError_t<sp/>hip_error);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__Error_1ga1421a2ee561f30d5b1dbed3ecb28b264" kindref="member">hipGetErrorString</ref>(hipError_t<sp/>hipError);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>doxygen<sp/>Error</highlight></codeline>
<codeline lineno="617"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1gaff5b62d6e9502d80879f7176f4d03102" kindref="member">hipStreamCreate</ref>(hipStream_t*<sp/>stream);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1gaf2382e3cc6632332a8983a0f58e43494" kindref="member">hipStreamCreateWithFlags</ref>(hipStream_t*<sp/>stream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1gace005d8ea734fb66c995bd43dac3fd44" kindref="member">hipStreamCreateWithPriority</ref>(hipStream_t*<sp/>stream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>priority);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1ga2b0709fb23b273abec8ea223ebb362bc" kindref="member">hipDeviceGetStreamPriorityRange</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>leastPriority,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>greatestPriority);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1ga3076a3499ed2c7821311006100bb95ec" kindref="member">hipStreamDestroy</ref>(hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e" kindref="member">hipStreamQuery</ref>(hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1gabbfb9f573a6ebe8c478605ecb5504a74" kindref="member">hipStreamSynchronize</ref>(hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1gacdd84c8f8ef1539c96c57c1d5bcae633" kindref="member">hipStreamWaitEvent</ref>(hipStream_t<sp/>stream,<sp/>hipEvent_t<sp/>event,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1ga3249555a26439591b8873f70b39bb116" kindref="member">hipStreamGetFlags</ref>(hipStream_t<sp/>stream,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>flags);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1gae5a0d1e66035b157149ec10f5c7952be" kindref="member">hipStreamGetPriority</ref>(hipStream_t<sp/>stream,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>priority);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="796" refid="group__Stream_1ga6d4e90ec5736f9728102be22d0559dfd" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__Stream_1ga6d4e90ec5736f9728102be22d0559dfd" kindref="member">hipStreamCallback_t</ref>)(hipStream_t<sp/>stream,<sp/>hipError_t<sp/>status,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>userData);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal">hipError_t<sp/><ref refid="group__Stream_1ga3e098cd7478828b2104abb41a7bb00d3" kindref="member">hipStreamAddCallback</ref>(hipStream_t<sp/>stream,<sp/><ref refid="group__Stream_1ga6d4e90ec5736f9728102be22d0559dfd" kindref="member">hipStreamCallback_t</ref><sp/>callback,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>userData,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>doxygen<sp/>Stream</highlight></codeline>
<codeline lineno="854"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1gae86a5acb1b22b61bc9ecb9c28fc71b75" kindref="member">hipEventCreateWithFlags</ref>(hipEvent_t*<sp/>event,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1ga5df2309c9f29ca4c8e669db658d411b4" kindref="member">hipEventCreate</ref>(hipEvent_t*<sp/>event);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>(hipEvent_t<sp/>event,<sp/>hipStream_t<sp/>stream<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29" kindref="member">hipEventRecord</ref>(hipEvent_t<sp/>event,<sp/>hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1ga83260357dce0c39e8c6a3c74ec97484c" kindref="member">hipEventDestroy</ref>(hipEvent_t<sp/>event);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1" kindref="member">hipEventSynchronize</ref>(hipEvent_t<sp/>event);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1gad4128b815cb475c8e13c7e66ff6250b7" kindref="member">hipEventElapsedTime</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>ms,<sp/>hipEvent_t<sp/>start,<sp/>hipEvent_t<sp/>stop);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">hipError_t<sp/><ref refid="group__Event_1ga5d12d7b798b5ceb5932d1ac21f5ac776" kindref="member">hipEventQuery</ref>(hipEvent_t<sp/>event);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>doxygen<sp/>Events</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga7c3e8663feebb7be9fd3a1e5139bcefc" kindref="member">hipPointerGetAttributes</ref>(hipPointerAttribute_t*<sp/>attributes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga4c6fcfe80010069d2792780d00dcead2" kindref="member">hipMalloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal">DEPRECATED(</highlight><highlight class="stringliteral">&quot;use<sp/>hipHostMalloc<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga66399e729223ff5b66ffc16297c0710e" kindref="member">hipMallocHost</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal">DEPRECATED(&quot;use<sp/><ref refid="group__Memory_1gaad40bc7d97ccc799403ef5a9a8c246e1" kindref="member">hipHostMalloc</ref><sp/>instead&quot;)</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga0e35f3397f6ea9c3f47a17461ae01231" kindref="member">hipHostAlloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga8fa7a0478020b835a24785cd6bb89725" kindref="member">hipHostGetDevicePointer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>devPtr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hstPtr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga4d26915873b3e3534ceb4dc310f8709a" kindref="member">hipHostGetFlags</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>flagsPtr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hostPtr);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gab8258f051e1a1f7385f794a15300e674" kindref="member">hipHostRegister</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hostPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga4c9e1810b9f5858d36c4d28c91c86924" kindref="member">hipHostUnregister</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>hostPtr);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga805c7320498926e444616fe090c727ee" kindref="member">hipMallocPitch</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>pitch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga740d08da65cae1441ba32f8fedb863d1" kindref="member">hipFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">DEPRECATED(&quot;use<sp/><ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref><sp/>instead&quot;)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga28d7d92836116dfadeb62e416ee887d3" kindref="member">hipFreeHost</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga2e543f58ee4544e317cd695d6d82e0a3" kindref="member">hipHostFree</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gac1a055d288302edd641c6d7416858e1e" kindref="member">hipMemcpy</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/>hipMemcpyKind<sp/>kind);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gaa415ecdd2535e1eb618ed8a31a6f03af" kindref="member">hipMemcpyHtoD</ref>(hipDeviceptr_t<sp/>dst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gae61f4e35ff1b9643c6328bc45d091c3f" kindref="member">hipMemcpyDtoH</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>hipDeviceptr_t<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga814f245b8918f173c1f2f8c1480f7f93" kindref="member">hipMemcpyDtoD</ref>(hipDeviceptr_t<sp/>dst,<sp/>hipDeviceptr_t<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gae3e76acb34bed5e3b19b4c1822975bcd" kindref="member">hipMemcpyHtoDAsync</ref>(hipDeviceptr_t<sp/>dst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/>hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gad69da1994a646b843fb1fa465dbeb623" kindref="member">hipMemcpyDtoHAsync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>hipDeviceptr_t<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/>hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gad3bba6016cba62f0e933cdfb4c312d27" kindref="member">hipMemcpyDtoDAsync</ref>(hipDeviceptr_t<sp/>dst,<sp/>hipDeviceptr_t<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipStream_t<sp/>stream);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga21dddb880b518c808f89b4a88da66625" kindref="member">hipMemcpyToSymbol</ref>(const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbolName,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>__dparm(0),<sp/>hipMemcpyKind<sp/>kind<sp/>__dparm(hipMemcpyHostToDevice));</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gae8ba000d414eef829957648c24cced5b" kindref="member">hipGetSymbolAddress</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>devPtr,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbolName);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga5ab6cb64d6d30236423969b5a0108230" kindref="member">hipGetSymbolSize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>size,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbolName);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga4023cb80b01c9744dbb1bdf64e4a5855" kindref="member">hipMemcpyToSymbolAsync</ref>(const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbolName,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/>hipMemcpyKind<sp/>kind,<sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal">hipError_t<sp/>hipMemcpyFromSymbol(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbolName,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>__dparm(0),<sp/>hipMemcpyKind<sp/>kind<sp/>__dparm(<sp/>hipMemcpyDeviceToHost<sp/>));</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal">hipError_t<sp/>hipMemcpyFromSymbolAsync(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbolName,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/>hipMemcpyKind<sp/>kind,<sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gab388b755a0ee2c86ca5e0c29391a584c" kindref="member">hipMemcpyAsync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/>hipMemcpyKind<sp/>kind,</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gac7441e74affcce4b8b69dba996c5ebc4" kindref="member">hipMemset</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gab66cf8be5f4108218cc9a94d8c842e2c" kindref="member">hipMemsetD8</ref>(hipDeviceptr_t<sp/>dest,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gaab3fea033f93488f8c50ffc244396a78" kindref="member">hipMemsetAsync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gae1e7b4c740cc02611ea8122bec376201" kindref="member">hipMemset2D</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pitch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gad890cda186f947512de1804cb06fb497" kindref="member">hipMemset2DAsync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pitch,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga3c04a21c9de9c55b3e47d8c87a0b0593" kindref="member">hipMemset3D</ref>(hipPitchedPtr<sp/>pitchedDevPtr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>value,<sp/>hipExtent<sp/>extent<sp/>);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gaabb1a77ae6411a8d1f509d3a287530ac" kindref="member">hipMemset3DAsync</ref>(hipPitchedPtr<sp/>pitchedDevPtr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>value,<sp/>hipExtent<sp/>extent<sp/>,hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga311c3e246a21590de14478b8bd063be2" kindref="member">hipMemGetInfo</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>free,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>total);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal">hipError_t<sp/>hipMemPtrGetInfo(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>size);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gad20a96c14589cb226fcde1219512a0f9" kindref="member">hipMallocArray</ref>(hipArray**<sp/>array,<sp/>const<sp/>hipChannelFormatDesc*<sp/>desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height<sp/>__dparm(0),<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>__dparm(<ref refid="group__GlobalDefs_1ga2cae862086a89539b3cf6906a458190c" kindref="member">hipArrayDefault</ref>));</highlight></codeline>
<codeline lineno="1601"><highlight class="normal">hipError_t<sp/>hipArrayCreate(hipArray**<sp/>pHandle,<sp/>const<sp/>HIP_ARRAY_DESCRIPTOR*<sp/>pAllocateArray);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal">hipError_t<sp/>hipArray3DCreate(hipArray**<sp/>array,<sp/>const<sp/>HIP_ARRAY_DESCRIPTOR*<sp/>pAllocateArray);</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal">hipError_t<sp/>hipMalloc3D(hipPitchedPtr*<sp/>pitchedDevPtr,<sp/>hipExtent<sp/>extent);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gae29935073517245c69bc64790dd2747a" kindref="member">hipFreeArray</ref>(hipArray*<sp/>array);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga6b3423ded4fe1c64eb7b168cb569a6ea" kindref="member">hipMalloc3DArray</ref>(hipArray**<sp/>array,<sp/>const<sp/>struct<sp/>hipChannelFormatDesc*<sp/>desc,</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>hipExtent<sp/>extent,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1647"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a" kindref="member">hipMemcpy2D</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dpitch,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spitch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/>hipMemcpyKind<sp/>kind);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal">hipError_t<sp/>hipMemcpyParam2D(const<sp/>hip_Memcpy2D*<sp/>pCopy);</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gac79f26f9ec7b4d7bcda27d103ff6c3cd" kindref="member">hipMemcpy2DAsync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dpitch,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spitch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/>hipMemcpyKind<sp/>kind,<sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gab08b0bd6cdbb57e79df40ef1cd0374e0" kindref="member">hipMemcpy2DToArray</ref>(hipArray*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wOffset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hOffset,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spitch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/>hipMemcpyKind<sp/>kind);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga2e631f0b6757b47b74cdaa2911784be9" kindref="member">hipMemcpyToArray</ref>(hipArray*<sp/>dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wOffset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hOffset,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>hipMemcpyKind<sp/>kind);</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga8c39c67c4ba098c6e6e116a9a4839a24" kindref="member">hipMemcpyFromArray</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>hipArray_const_t<sp/>srcArray,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>wOffset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hOffset,</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,<sp/>hipMemcpyKind<sp/>kind);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga08c79ffadab96a69fa69ae8f677ef200" kindref="member">hipMemcpyAtoH</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>hipArray*<sp/>srcArray,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>srcOffset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1gaf69322934ad387e4af4a9015d6b9b701" kindref="member">hipMemcpyHtoA</ref>(hipArray*<sp/>dstArray,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dstOffset,<sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>srcHost,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal">hipError_t<sp/><ref refid="group__Memory_1ga38facb98eb1ae8206376c3c48bf5c444" kindref="member">hipMemcpy3D</ref>(const<sp/>struct<sp/>hipMemcpy3DParms*<sp/>p);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doxygen<sp/>end<sp/>Memory</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__PeerToPeer_1ga0a1c9ccd775758d9d7d5b5a1f525b719" kindref="member">hipDeviceCanAccessPeer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>canAccessPeer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deviceId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peerDeviceId);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal">hipError_t<sp/><ref refid="group__PeerToPeer_1ga0caca59034134d7a7bb893cc1caa653e" kindref="member">hipDeviceEnablePeerAccess</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peerDeviceId,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal">hipError_t<sp/><ref refid="group__PeerToPeer_1ga85030c72824fb60aaddc7374ab60481b" kindref="member">hipDeviceDisablePeerAccess</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>peerDeviceId);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal">hipError_t<sp/><ref refid="group__PeerToPeer_1gac7d9132f6e3d102e9b512020e5654f38" kindref="member">hipMemGetAddressRange</ref>(hipDeviceptr_t*<sp/>pbase,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>psize,<sp/>hipDeviceptr_t<sp/>dptr);</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_PEER_NON_UNIFIED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>USE_PEER_NON_UNIFIED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"></highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>USE_PEER_NON_UNIFIED<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal">hipError_t<sp/><ref refid="group__PeerToPeer_1ga5512f45e25c08052667c8ffe7162333b" kindref="member">hipMemcpyPeer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dstDeviceId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srcDeviceId,</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal">hipError_t<sp/><ref refid="group__PeerToPeer_1ga6f500e146a98bb41a5972fe091fcc4b6" kindref="member">hipMemcpyPeerAsync</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dstDeviceId,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srcDevice,</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeBytes,<sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doxygen<sp/>end<sp/>PeerToPeer</highlight></codeline>
<codeline lineno="1905"><highlight class="comment"></highlight><highlight class="comment">//<sp/>TODO-ctx<sp/>-<sp/>more<sp/>description<sp/>on<sp/>error<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga01baa652dda5815c594d047060496caa" kindref="member">hipInit</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="1929"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc" kindref="member">hipCtxCreate</ref>(hipCtx_t*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/>hipDevice_t<sp/>device);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga9a65fe43238ef303a6d97826c05fd14e" kindref="member">hipCtxDestroy</ref>(hipCtx_t<sp/>ctx);</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="1955"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga2cc4ea5a6b78d9d7990a88a7863467d4" kindref="member">hipCtxPopCurrent</ref>(hipCtx_t*<sp/>ctx);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="1968"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga9c9d92f29d68cacdea4c062c97e50a8a" kindref="member">hipCtxPushCurrent</ref>(hipCtx_t<sp/>ctx);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga834a192f70c2bfc0269c309436776feb" kindref="member">hipCtxSetCurrent</ref>(hipCtx_t<sp/>ctx);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="1994"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga741786101d348fdbfa1f64546860357a" kindref="member">hipCtxGetCurrent</ref>(hipCtx_t*<sp/>ctx);</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga8aa32cf64272da929f23ecbafefefcee" kindref="member">hipCtxGetDevice</ref>(hipDevice_t*<sp/>device);</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gabe5941e6798c71a8351b7d51311e7e8f" kindref="member">hipCtxGetApiVersion</ref>(hipCtx_t<sp/>ctx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>apiVersion);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2044"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gab10373068faafd3042c9003e2e6d905a" kindref="member">hipCtxGetCacheConfig</ref>(hipFuncCache_t*<sp/>cacheConfig);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2060"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga7eacc656f1d1b6f5a683bea31be67a2f" kindref="member">hipCtxSetCacheConfig</ref>(hipFuncCache_t<sp/>cacheConfig);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gad5c1d4ced27f584a74ed550dd002fa5a" kindref="member">hipCtxSetSharedMemConfig</ref>(hipSharedMemConfig<sp/>config);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2092"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga3c78b22dd03435a7ca88621a45409565" kindref="member">hipCtxGetSharedMemConfig</ref>(hipSharedMemConfig*<sp/>pConfig);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gad45cd968e8e3dcfd24ef050cab2f41c8" kindref="member">hipCtxSynchronize</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga12a7a993e10f775fbf61a0b14288ed1b" kindref="member">hipCtxGetFlags</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>flags);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2141"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga834dfd99d72082fe8770142fa30b30e2" kindref="member">hipCtxEnablePeerAccess</ref>(hipCtx_t<sp/>peerCtx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal">DEPRECATED(DEPRECATED_MSG)</highlight></codeline>
<codeline lineno="2160"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gaf48e4e9c3b6bbad5deaeff10d2e28b31" kindref="member">hipCtxDisablePeerAccess</ref>(hipCtx_t<sp/>peerCtx);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga60d31f744991c6c568ec3027cf1fb8ab" kindref="member">hipDevicePrimaryCtxGetState</ref>(hipDevice_t<sp/>dev,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>active);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga7bbe8905908168909ddecd98cd34c1e8" kindref="member">hipDevicePrimaryCtxRelease</ref>(hipDevice_t<sp/>dev);</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gab6e1014e9a4dbe281b84e38d89ff2409" kindref="member">hipDevicePrimaryCtxRetain</ref>(hipCtx_t*<sp/>pctx,<sp/>hipDevice_t<sp/>dev);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1gac2ca146e5d67b28d870dadd9dc3fc04e" kindref="member">hipDevicePrimaryCtxReset</ref>(hipDevice_t<sp/>dev);</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2226"><highlight class="normal">hipError_t<sp/><ref refid="group__Context_1ga5cd8ba188e628274142dd44d39780436" kindref="member">hipDevicePrimaryCtxSetFlags</ref>(hipDevice_t<sp/>dev,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doxygen<sp/>end<sp/>Context<sp/>Management</highlight></codeline>
<codeline lineno="2240"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1gadf6c74aaf7c22fea80e9ac3400d43704" kindref="member">hipDeviceGet</ref>(hipDevice_t*<sp/>device,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ordinal);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga0a1cf94d2b571ca3279577d5af0d1672" kindref="member">hipDeviceComputeCapability</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>major,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>minor,<sp/>hipDevice_t<sp/>device);</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga24df15e180a7b2b351cd362e5b7d2dac" kindref="member">hipDeviceGetName</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>hipDevice_t<sp/>device);</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1gaaa961c8ec8047903617f4245fa50256a" kindref="member">hipDeviceGetPCIBusId</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pciBusId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga2ec307f165d576c0c673a7b1fa9b0fe4" kindref="member">hipDeviceGetByPCIBusId</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pciBusId);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga8991e535d0ef1ead0524e73364623041" kindref="member">hipDeviceTotalMem</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bytes,<sp/>hipDevice_t<sp/>device);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1gaf6c342f52d2a29a0aca5cdd89b4dd47c" kindref="member">hipDriverGetVersion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>driverVersion);</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1gae8b7ba34d2e11e334650aa51a4dd87ee" kindref="member">hipRuntimeGetVersion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>runtimeVersion);</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga31d806d976e91d36bd990ae3004d8760" kindref="member">hipModuleLoad</ref>(hipModule_t*<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fname);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1gae58e345f55bb3ec13dca80d2df88e0ed" kindref="member">hipModuleUnload</ref>(hipModule_t<sp/>module);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga9648b457bb837838cb936b417b56a65d" kindref="member">hipModuleGetFunction</ref>(hipFunction_t*<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>hipModule_t<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kname);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga8fd39dc48bcf28cc693ed7673c9f02c1" kindref="member">hipFuncGetAttributes</ref>(<ref refid="structhipFuncAttributes" kindref="compound">hipFuncAttributes</ref>*<sp/>attr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>func);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga3e425a680285f495e776f096e9632c89" kindref="member">hipModuleGetGlobal</ref>(hipDeviceptr_t*<sp/>dptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bytes,<sp/>hipModule_t<sp/>hmod,</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal">hipError_t<sp/>ihipModuleGetGlobal(hipDeviceptr_t*<sp/>dptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>bytes,<sp/>hipModule_t<sp/>hmod,</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal">hipError_t<sp/>hipModuleGetTexRef(textureReference**<sp/>texRef,<sp/>hipModule_t<sp/>hmod,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1gaabdbd73e952a741e861d01109c4790f3" kindref="member">hipModuleLoadData</ref>(hipModule_t*<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>image);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga3e70722338894f48540c7be9a136af79" kindref="member">hipModuleLoadDataEx</ref>(hipModule_t*<sp/>module,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>image,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numOptions,</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipJitOption*<sp/>options,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>optionValues);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal">hipError_t<sp/><ref refid="group__Driver_1ga2e4de5937aa8171e9eda16c881ed0674" kindref="member">hipModuleLaunchKernel</ref>(hipFunction_t<sp/>f,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridDimX,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridDimY,</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gridDimZ,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockDimX,</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockDimY,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockDimZ,</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sharedMemBytes,<sp/>hipStream_t<sp/>stream,</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>kernelParams,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>extra);</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doxygen<sp/>end<sp/>Version<sp/>Management</highlight></codeline>
<codeline lineno="2463"><highlight class="comment"></highlight><highlight class="comment">//<sp/>TODO<sp/>-<sp/>expand<sp/>descriptions:</highlight></codeline>
<codeline lineno="2469"><highlight class="comment"></highlight><highlight class="normal">hipError_t<sp/><ref refid="group__Profiler_1ga40aa20d731f9c8f0586127d589759e1d" kindref="member">hipProfilerStart</ref>();</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal">hipError_t<sp/><ref refid="group__Profiler_1ga777994cae0f7bdef24131fc1f3ed626e" kindref="member">hipProfilerStop</ref>();</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="comment">//<sp/>TODO:<sp/>implement<sp/>IPC<sp/>apis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal">hipError_t<sp/><ref refid="group__API_1gafd8c80f7e3b6426a630fff768409be70" kindref="member">hipIpcGetMemHandle</ref>(<ref refid="structhipIpcMemHandle__t" kindref="compound">hipIpcMemHandle_t</ref>*<sp/>handle,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal">hipError_t<sp/><ref refid="group__API_1ga2ada334c986e10805d58167e260cb0df" kindref="member">hipIpcOpenMemHandle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>devPtr,<sp/><ref refid="structhipIpcMemHandle__t" kindref="compound">hipIpcMemHandle_t</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal">hipError_t<sp/><ref refid="group__API_1gac2db0688a6a471e17ca631977e199da7" kindref="member">hipIpcCloseMemHandle</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr);</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hipError_t<sp/>hipIpcGetMemHandle(hipIpcMemHandle_t*<sp/>handle,<sp/>void*<sp/>devPtr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hipError_t<sp/>hipIpcCloseMemHandle(void<sp/>*devPtr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>hipError_t<sp/>hipIpcOpenEventHandle(hipEvent_t*<sp/>event,<sp/>hipIpcEventHandle_t<sp/>handle);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hipError_t<sp/>hipIpcOpenMemHandle(void**<sp/>devPtr,<sp/>hipIpcMemHandle_t<sp/>handle,<sp/>unsigned<sp/>int<sp/>flags);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal">hipError_t<sp/><ref refid="group__Clang_1ga61aa3baf383168cc638e01d9e8d8f229" kindref="member">hipConfigureCall</ref>(<ref refid="structdim3" kindref="compound">dim3</ref><sp/>gridDim,<sp/><ref refid="structdim3" kindref="compound">dim3</ref><sp/>blockDim,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sharedMem<sp/>__dparm(0),<sp/>hipStream_t<sp/>stream<sp/>__dparm(0));</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal">hipError_t<sp/><ref refid="group__Clang_1ga047cff6205399540ebe31cdd11257c07" kindref="member">hipSetupArgument</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal">hipError_t<sp/><ref refid="group__Clang_1ga80f5f26fe76b213fbfd77e4fc9e04cbd" kindref="member">hipLaunchByPtr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>func);</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;c&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hip/hcc_detail/hip_prof_api.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal">hipError_t<sp/><ref refid="group__API_1ga31285b05f702fd1ba9e18521d66b46d8" kindref="member">hipRegisterApiCallback</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fun,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal">hipError_t<sp/>hipRemoveApiCallback(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2645"><highlight class="normal">hipError_t<sp/>hipRegisterActivityCallback(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fun,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg);</highlight></codeline>
<codeline lineno="2646"><highlight class="normal">hipError_t<sp/>hipRemoveActivityCallback(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hipApiName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hip_api_name(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>hipKernelNameRef(hipFunction_t<sp/>f);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2650"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal">hipError_t<sp/>hipBindTexture(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/>textureReference*<sp/>tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>UINT_MAX);</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal">hipError_t<sp/>ihipBindTextureImpl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>hipTextureReadMode<sp/>readMode,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc,</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>textureReference*<sp/>tex);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2663"><highlight class="comment"><sp/>*<sp/>@brief<sp/>hipBindTexture<sp/>Binds<sp/>size<sp/>bytes<sp/>of<sp/>the<sp/>memory<sp/>area<sp/>pointed<sp/>to<sp/>by<sp/>@p<sp/>devPtr<sp/>to<sp/>the<sp/>texture</highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/>*reference<sp/>tex.</highlight></codeline>
<codeline lineno="2665"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/>*<sp/>@p<sp/>desc<sp/>describes<sp/>how<sp/>the<sp/>memory<sp/>is<sp/>interpreted<sp/>when<sp/>fetching<sp/>values<sp/>from<sp/>the<sp/>texture.<sp/>The<sp/>@p</highlight></codeline>
<codeline lineno="2667"><highlight class="comment"><sp/>*offset<sp/>parameter<sp/>is<sp/>an<sp/>optional<sp/>byte<sp/>offset<sp/>as<sp/>with<sp/>the<sp/>low-level<sp/>hipBindTexture()<sp/>function.<sp/>Any</highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/>*memory<sp/>previously<sp/>bound<sp/>to<sp/>tex<sp/>is<sp/>unbound.</highlight></codeline>
<codeline lineno="2669"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2670"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>offset<sp/>-<sp/>Offset<sp/>in<sp/>bytes</highlight></codeline>
<codeline lineno="2671"><highlight class="comment"><sp/>*<sp/><sp/>@param[out]<sp/><sp/>tex<sp/>-<sp/>texture<sp/>to<sp/>bind</highlight></codeline>
<codeline lineno="2672"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>devPtr<sp/>-<sp/>Memory<sp/>area<sp/>on<sp/>device</highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>desc<sp/>-<sp/>Channel<sp/>format</highlight></codeline>
<codeline lineno="2674"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>size<sp/>-<sp/>Size<sp/>of<sp/>the<sp/>memory<sp/>area<sp/>pointed<sp/>to<sp/>by<sp/>devPtr</highlight></codeline>
<codeline lineno="2675"><highlight class="comment"><sp/>*<sp/><sp/>@return<sp/>#hipSuccess,<sp/>#hipErrorInvalidValue,<sp/>#hipErrorMemoryFree,<sp/>#hipErrorUnknown</highlight></codeline>
<codeline lineno="2676"><highlight class="comment"><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal">hipError_t<sp/>hipBindTexture(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc&amp;<sp/>desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>UINT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTextureImpl(dim,<sp/>readMode,<sp/>offset,<sp/>devPtr,<sp/>&amp;desc,<sp/>size,<sp/>&amp;tex);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2684"><highlight class="comment"><sp/>*<sp/>@brief<sp/>hipBindTexture<sp/>Binds<sp/>size<sp/>bytes<sp/>of<sp/>the<sp/>memory<sp/>area<sp/>pointed<sp/>to<sp/>by<sp/>@p<sp/>devPtr<sp/>to<sp/>the<sp/>texture</highlight></codeline>
<codeline lineno="2685"><highlight class="comment"><sp/>*reference<sp/>tex.</highlight></codeline>
<codeline lineno="2686"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2687"><highlight class="comment"><sp/>*<sp/>@p<sp/>desc<sp/>describes<sp/>how<sp/>the<sp/>memory<sp/>is<sp/>interpreted<sp/>when<sp/>fetching<sp/>values<sp/>from<sp/>the<sp/>texture.<sp/>The<sp/>@p</highlight></codeline>
<codeline lineno="2688"><highlight class="comment"><sp/>*offset<sp/>parameter<sp/>is<sp/>an<sp/>optional<sp/>byte<sp/>offset<sp/>as<sp/>with<sp/>the<sp/>low-level<sp/>hipBindTexture()<sp/>function.<sp/>Any</highlight></codeline>
<codeline lineno="2689"><highlight class="comment"><sp/>*memory<sp/>previously<sp/>bound<sp/>to<sp/>tex<sp/>is<sp/>unbound.</highlight></codeline>
<codeline lineno="2690"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2691"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>offset<sp/>-<sp/>Offset<sp/>in<sp/>bytes</highlight></codeline>
<codeline lineno="2692"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>tex<sp/>-<sp/>texture<sp/>to<sp/>bind</highlight></codeline>
<codeline lineno="2693"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>devPtr<sp/>-<sp/>Memory<sp/>area<sp/>on<sp/>device</highlight></codeline>
<codeline lineno="2694"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>size<sp/>-<sp/>Size<sp/>of<sp/>the<sp/>memory<sp/>area<sp/>pointed<sp/>to<sp/>by<sp/>devPtr</highlight></codeline>
<codeline lineno="2695"><highlight class="comment"><sp/>*<sp/><sp/>@return<sp/>#hipSuccess,<sp/>#hipErrorInvalidValue,<sp/>#hipErrorMemoryFree,<sp/>#hipErrorUnknown</highlight></codeline>
<codeline lineno="2696"><highlight class="comment"><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal">hipError_t<sp/>hipBindTexture(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>UINT_MAX)<sp/>{</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTextureImpl(dim,<sp/>readMode,<sp/>offset,<sp/>devPtr,<sp/>&amp;(tex.channelDesc),<sp/>size,<sp/>&amp;tex);</highlight></codeline>
<codeline lineno="2701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal">hipError_t<sp/>hipBindTexture2D(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/>textureReference*<sp/>tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pitch);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal">hipError_t<sp/>ihipBindTexture2DImpl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>hipTextureReadMode<sp/>readMode,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc,</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/>textureReference*<sp/>tex);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2713"><highlight class="normal">hipError_t<sp/>hipBindTexture2D(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pitch)<sp/>{</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTexture2DImpl(dim,<sp/>readMode,<sp/>offset,<sp/>devPtr,<sp/>&amp;(tex.channelDesc),<sp/>width,<sp/>height,</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;tex);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal">hipError_t<sp/>hipBindTexture2D(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>devPtr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc&amp;<sp/>desc,</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>height,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pitch)<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTexture2DImpl(dim,<sp/>readMode,<sp/>offset,<sp/>devPtr,<sp/>&amp;desc,<sp/>width,<sp/>height,<sp/>&amp;tex);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal">hipError_t<sp/>hipBindTextureToArray(textureReference*<sp/>tex,<sp/>hipArray_const_t<sp/>array,</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc);</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal">hipError_t<sp/>ihipBindTextureToArrayImpl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>hipTextureReadMode<sp/>readMode,</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipArray_const_t<sp/>array,</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc&amp;<sp/>desc,</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>textureReference*<sp/>tex);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2736"><highlight class="normal">hipError_t<sp/>hipBindTextureToArray(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,<sp/>hipArray_const_t<sp/>array)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTextureToArrayImpl(dim,<sp/>readMode,<sp/>array,<sp/>tex.channelDesc,<sp/>&amp;tex);</highlight></codeline>
<codeline lineno="2738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal">hipError_t<sp/>hipBindTextureToArray(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,<sp/>hipArray_const_t<sp/>array,</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc&amp;<sp/>desc)<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTextureToArrayImpl(dim,<sp/>readMode,<sp/>array,<sp/>desc,<sp/>&amp;tex);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>hipError_t<sp/>hipBindTextureToArray(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;<sp/>*tex,</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipArray_const_t<sp/>array,</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc)<sp/>{</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipBindTextureToArrayImpl(dim,<sp/>readMode,<sp/>array,<sp/>*desc,<sp/>tex);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal">hipError_t<sp/>hipBindTextureToMipmappedArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>textureReference*<sp/>tex,</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipMipmappedArray_const_t<sp/>mipmappedArray,</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipChannelFormatDesc*<sp/>desc);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal">hipError_t<sp/>hipBindTextureToMipmappedArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipMipmappedArray_const_t<sp/>mipmappedArray)<sp/>{</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hipSuccess;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal">hipError_t<sp/>hipBindTextureToMipmappedArray(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex,</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipMipmappedArray_const_t<sp/>mipmappedArray,</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipChannelFormatDesc&amp;<sp/>desc)<sp/>{</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hipSuccess;</highlight></codeline>
<codeline lineno="2769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2772"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Unbinds<sp/>the<sp/>textuer<sp/>bound<sp/>to<sp/>@p<sp/>tex</highlight></codeline>
<codeline lineno="2773"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2774"><highlight class="comment"><sp/>*<sp/><sp/>@param[in]<sp/><sp/>tex<sp/>-<sp/>texture<sp/>to<sp/>unbind</highlight></codeline>
<codeline lineno="2775"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="2776"><highlight class="comment"><sp/>*<sp/><sp/>@return<sp/>#hipSuccess</highlight></codeline>
<codeline lineno="2777"><highlight class="comment"><sp/>**/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal">hipError_t<sp/>hipUnbindTexture(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>textureReference*<sp/>tex);</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>hipError_t<sp/>ihipUnbindTextureImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipTextureObject_t&amp;<sp/>textureObject);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>enum<sp/>hipTextureReadMode<sp/>readMode&gt;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal">hipError_t<sp/>hipUnbindTexture(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>texture&lt;T,<sp/>dim,<sp/>readMode&gt;&amp;<sp/>tex)<sp/>{</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ihipUnbindTextureImpl(tex.textureObject);</highlight></codeline>
<codeline lineno="2785"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal">hipError_t<sp/>hipGetChannelDesc(hipChannelFormatDesc*<sp/>desc,<sp/>hipArray_const_t<sp/>array);</highlight></codeline>
<codeline lineno="2788"><highlight class="normal">hipError_t<sp/>hipGetTextureAlignmentOffset(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>textureReference*<sp/>texref);</highlight></codeline>
<codeline lineno="2789"><highlight class="normal">hipError_t<sp/>hipGetTextureReference(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>textureReference**<sp/>texref,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>symbol);</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal">hipError_t<sp/>hipCreateTextureObject(hipTextureObject_t*<sp/>pTexObject,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipResourceDesc*<sp/>pResDesc,</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipTextureDesc*<sp/>pTexDesc,</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipResourceViewDesc*<sp/>pResViewDesc);</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal">hipError_t<sp/>hipDestroyTextureObject(hipTextureObject_t<sp/>textureObject);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal">hipError_t<sp/>hipGetTextureObjectResourceDesc(hipResourceDesc*<sp/>pResDesc,</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipTextureObject_t<sp/>textureObject);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal">hipError_t<sp/>hipGetTextureObjectResourceViewDesc(hipResourceViewDesc*<sp/>pResViewDesc,</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipTextureObject_t<sp/>textureObject);</highlight></codeline>
<codeline lineno="2801"><highlight class="normal">hipError_t<sp/>hipGetTextureObjectTextureDesc(hipTextureDesc*<sp/>pTexDesc,</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipTextureObject_t<sp/>textureObject);</highlight></codeline>
<codeline lineno="2803"><highlight class="normal">hipError_t<sp/>hipTexRefSetArray(textureReference*<sp/>tex,<sp/>hipArray_const_t<sp/>array,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal">hipError_t<sp/>hipTexRefSetAddressMode(textureReference*<sp/>tex,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dim,<sp/>hipTextureAddressMode<sp/>am);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal">hipError_t<sp/>hipTexRefSetFilterMode(textureReference*<sp/>tex,<sp/>hipTextureFilterMode<sp/>fm);</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal">hipError_t<sp/>hipTexRefSetFlags(textureReference*<sp/>tex,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal">hipError_t<sp/>hipTexRefSetFormat(textureReference*<sp/>tex,<sp/>hipArray_Format<sp/>fmt,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumPackedComponents);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal">hipError_t<sp/>hipTexRefSetAddress(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>offset,<sp/>textureReference*<sp/>tex,<sp/>hipDeviceptr_t<sp/>devPtr,</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal">hipError_t<sp/>hipTexRefSetAddress2D(textureReference*<sp/>tex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HIP_ARRAY_DESCRIPTOR*<sp/>desc,</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hipDeviceptr_t<sp/>devPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pitch);</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal">hipError_t<sp/>hipCreateSurfaceObject(hipSurfaceObject_t*<sp/>pSurfObject,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hipResourceDesc*<sp/>pResDesc);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal">hipError_t<sp/>hipDestroySurfaceObject(hipSurfaceObject_t<sp/>surfaceObject);</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doxygen<sp/>end<sp/>Texture</highlight></codeline>
<codeline lineno="2829"><highlight class="comment"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="comment">//<sp/>end-group<sp/>HCC_Specific</highlight></codeline>
<codeline lineno="2855"><highlight class="comment"></highlight><highlight class="comment">//<sp/>doxygen<sp/>end<sp/>HIP<sp/>API</highlight></codeline>
<codeline lineno="2860"><highlight class="comment"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ROCm_API_References/HIP/include/hip/hcc_detail/hip_runtime_api.h"/>
  </compounddef>
</doxygen>
